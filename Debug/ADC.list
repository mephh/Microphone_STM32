
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007428  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007654  08007654  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800765c  0800765c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  200001ec  08007850  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  08007850  00021390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014850  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f8d  00000000  00000000  00034a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  000386b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d44  00000000  00000000  000391f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dba8  00000000  00000000  00051f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ae4c  00000000  00000000  0005fae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  000ea9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075b0 	.word	0x080075b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080075b0 	.word	0x080075b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
//	buffer[0] = HAL_ADC_GetValue(hadc1);
	snprintf( buffer, sizeof(buffer), "%6d\n", HAL_ADC_GetValue(hadc1) );
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 fd04 	bl	8000f96 <HAL_ADC_GetValue>
 800058e:	4603      	mov	r3, r0
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000596:	f006 fca9 	bl	8006eec <sniprintf>
//	CDC_Transmit_FS((uint8_t*)buffer, sizeof(uint16_t));
	CDC_Transmit_FS(buffer, 7);
 800059a:	2107      	movs	r1, #7
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x34>)
 800059e:	f005 ff73 	bl	8006488 <CDC_Transmit_FS>
	HAL_ADC_Start_IT(hadc1);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 fb06 	bl	8000bb4 <HAL_ADC_Start_IT>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080075c8 	.word	0x080075c8
 80005b4:	20000260 	.word	0x20000260

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fa22 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f80c 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8ca 	bl	800075c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005c8:	f005 fe8c 	bl	80062e4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005cc:	f000 f874 	bl	80006b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80005d0:	4801      	ldr	r0, [pc, #4]	; (80005d8 <main+0x20>)
 80005d2:	f000 faef 	bl	8000bb4 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005d6:	e7fe      	b.n	80005d6 <main+0x1e>
 80005d8:	20000218 	.word	0x20000218

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 fbbe 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <SystemClock_Config+0xd4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <SystemClock_Config+0xd4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xd4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SystemClock_Config+0xd8>)
 800062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000658:	230f      	movs	r3, #15
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800065c:	2390      	movs	r3, #144	; 0x90
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000664:	2305      	movs	r3, #5
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 faf3 	bl	8002c58 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000678:	f000 f898 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fd4e 	bl	8003138 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006a2:	f000 f883 	bl	80007ac <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_ADC1_Init+0x98>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <MX_ADC1_Init+0x9c>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC1_Init+0x98>)
 80006d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_ADC1_Init+0x98>)
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_ADC1_Init+0xa0>)
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_ADC1_Init+0x98>)
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_ADC1_Init+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_ADC1_Init+0x98>)
 800071a:	f000 fa07 	bl	8000b2c <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 f842 	bl	80007ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000730:	2307      	movs	r3, #7
 8000732:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC1_Init+0x98>)
 800073a:	f000 fc4d 	bl	8000fd8 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000744:	f000 f832 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000218 	.word	0x20000218
 8000754:	40012000 	.word	0x40012000
 8000758:	0f000001 	.word	0x0f000001

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x4c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x4c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007b2:	e7fe      	b.n	80007b2 <Error_Handler+0x6>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_ADC_MspInit+0x8c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12f      	bne.n	8000886 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_ADC_MspInit+0x90>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_ADC_MspInit+0x90>)
 8000830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_ADC_MspInit+0x90>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_ADC_MspInit+0x90>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_ADC_MspInit+0x90>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_ADC_MspInit+0x90>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_ADC_MspInit+0x94>)
 8000872:	f000 feeb 	bl	800164c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2012      	movs	r0, #18
 800087c:	f000 feaf 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000880:	2012      	movs	r0, #18
 8000882:	f000 fec8 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f8de 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <ADC_IRQHandler+0x10>)
 80008f6:	f000 fa0d 	bl	8000d14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000218 	.word	0x20000218

08000904 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <OTG_FS_IRQHandler+0x10>)
 800090a:	f001 f971 	bl	8001bf0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000f84 	.word	0x20000f84

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f006 f9d6 	bl	8006cf8 <__errno>
 800094c:	4602      	mov	r2, r0
 800094e:	230c      	movs	r3, #12
 8000950:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20010000 	.word	0x20010000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000208 	.word	0x20000208
 8000980:	20001390 	.word	0x20001390

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <SystemInit+0x28>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <SystemInit+0x28>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SystemInit+0x28>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009b6:	e003      	b.n	80009c0 <LoopCopyDataInit>

080009b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009be:	3104      	adds	r1, #4

080009c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009c8:	d3f6      	bcc.n	80009b8 <CopyDataInit>
  ldr  r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009cc:	e002      	b.n	80009d4 <LoopFillZerobss>

080009ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d0:	f842 3b04 	str.w	r3, [r2], #4

080009d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009d8:	d3f9      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009da:	f7ff ffd3 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f006 f991 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e2:	f7ff fde9 	bl	80005b8 <main>
  bx  lr    
 80009e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80009ec:	08007664 	.word	0x08007664
  ldr  r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009f4:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80009f8:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80009fc:	20001390 	.word	0x20001390

08000a00 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <DMA1_Stream0_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_Init+0x40>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_Init+0x40>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x40>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 fdcb 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff febc 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fde3 	bl	8001632 <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 fdab 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	200002e0 	.word	0x200002e0

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200002e0 	.word	0x200002e0

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_Delay+0x40>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e033      	b.n	8000baa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d109      	bne.n	8000b5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fe5a 	bl	8000804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d118      	bne.n	8000b9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b72:	f023 0302 	bic.w	r3, r3, #2
 8000b76:	f043 0202 	orr.w	r2, r3, #2
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 fb4c 	bl	800121c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
 8000b9a:	e001      	b.n	8000ba0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_Start_IT+0x1a>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e094      	b.n	8000cf8 <HAL_ADC_Start_IT+0x144>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d018      	beq.n	8000c16 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0201 	orr.w	r2, r2, #1
 8000bf2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf4:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <HAL_ADC_Start_IT+0x150>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <HAL_ADC_Start_IT+0x154>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9a      	lsrs	r2, r3, #18
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c08:	e002      	b.n	8000c10 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f9      	bne.n	8000c0a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d168      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c2c:	f023 0301 	bic.w	r3, r3, #1
 8000c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c62:	d106      	bne.n	8000c72 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	f023 0206 	bic.w	r2, r3, #6
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c70:	e002      	b.n	8000c78 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_ADC_Start_IT+0x158>)
 8000c82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c8c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10f      	bne.n	8000cce <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11c      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	e013      	b.n	8000cf6 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_ADC_Start_IT+0x15c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d10e      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x142>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d107      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cf4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	20000000 	.word	0x20000000
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	40012300 	.word	0x40012300
 8000d10:	40012000 	.word	0x40012000

08000d14 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d049      	beq.n	8000dea <HAL_ADC_IRQHandler+0xd6>
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d046      	beq.n	8000dea <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d12b      	bne.n	8000dda <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d127      	bne.n	8000dda <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d119      	bne.n	8000dda <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0220 	bic.w	r2, r2, #32
 8000db4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fbd0 	bl	8000580 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f06f 0212 	mvn.w	r2, #18
 8000de8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	2b80      	cmp	r3, #128	; 0x80
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	2300      	movne	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d057      	beq.n	8000ecc <HAL_ADC_IRQHandler+0x1b8>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d054      	beq.n	8000ecc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d105      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d139      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d12b      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d124      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d11d      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d119      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 faa9 	bl	8001414 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f06f 020c 	mvn.w	r2, #12
 8000eca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	2b40      	cmp	r3, #64	; 0x40
 8000eee:	bf0c      	ite	eq
 8000ef0:	2301      	moveq	r3, #1
 8000ef2:	2300      	movne	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <HAL_ADC_IRQHandler+0x21a>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d014      	beq.n	8000f2e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10d      	bne.n	8000f2e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f846 	bl	8000fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f06f 0201 	mvn.w	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0320 	and.w	r3, r3, #32
 8000f38:	2b20      	cmp	r3, #32
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d015      	beq.n	8000f8e <HAL_ADC_IRQHandler+0x27a>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d012      	beq.n	8000f8e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f043 0202 	orr.w	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f06f 0220 	mvn.w	r2, #32
 8000f7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f820 	bl	8000fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f06f 0220 	mvn.w	r2, #32
 8000f8c:	601a      	str	r2, [r3, #0]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1c>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e105      	b.n	8001200 <HAL_ADC_ConfigChannel+0x228>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d925      	bls.n	8001050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68d9      	ldr	r1, [r3, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43da      	mvns	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	400a      	ands	r2, r1
 8001028:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68d9      	ldr	r1, [r3, #12]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	4603      	mov	r3, r0
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4403      	add	r3, r0
 8001042:	3b1e      	subs	r3, #30
 8001044:	409a      	lsls	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	e022      	b.n	8001096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6919      	ldr	r1, [r3, #16]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	2207      	movs	r2, #7
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	400a      	ands	r2, r1
 8001072:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6919      	ldr	r1, [r3, #16]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4403      	add	r3, r0
 800108c:	409a      	lsls	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b06      	cmp	r3, #6
 800109c:	d824      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	3b05      	subs	r3, #5
 80010b0:	221f      	movs	r2, #31
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	400a      	ands	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b05      	subs	r3, #5
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e04c      	b.n	8001182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d824      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b23      	subs	r3, #35	; 0x23
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43da      	mvns	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	400a      	ands	r2, r1
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b23      	subs	r3, #35	; 0x23
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
 8001138:	e023      	b.n	8001182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b41      	subs	r3, #65	; 0x41
 800114c:	221f      	movs	r2, #31
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	400a      	ands	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	3b41      	subs	r3, #65	; 0x41
 8001176:	fa00 f203 	lsl.w	r2, r0, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_ADC_ConfigChannel+0x234>)
 8001184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_ADC_ConfigChannel+0x238>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d109      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_ADC_ConfigChannel+0x238>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d123      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d003      	beq.n	80011be <HAL_ADC_ConfigChannel+0x1e6>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d111      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_ConfigChannel+0x23c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_ADC_ConfigChannel+0x240>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9a      	lsrs	r2, r3, #18
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <ADC_Init+0x1f0>)
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	021a      	lsls	r2, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6899      	ldr	r1, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <ADC_Init+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6899      	ldr	r1, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e00f      	b.n	800131a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001318:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0202 	bic.w	r2, r2, #2
 8001328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01b      	beq.n	8001380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001356:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	035a      	lsls	r2, r3, #13
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	e007      	b.n	8001390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	051a      	lsls	r2, r3, #20
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6899      	ldr	r1, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d2:	025a      	lsls	r2, r3, #9
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	029a      	lsls	r2, r3, #10
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40012300 	.word	0x40012300
 8001410:	0f000001 	.word	0x0f000001

08001414 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e159      	b.n	800191c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8148 	bne.w	8001916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d00b      	beq.n	80016a6 <HAL_GPIO_Init+0x5a>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	2b11      	cmp	r3, #17
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0xfc>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a2 	beq.w	8001916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a55      	ldr	r2, [pc, #340]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a51      	ldr	r2, [pc, #324]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x202>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a47      	ldr	r2, [pc, #284]	; (800193c <HAL_GPIO_Init+0x2f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x1fe>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a46      	ldr	r2, [pc, #280]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x1fa>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a45      	ldr	r2, [pc, #276]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x1f6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a44      	ldr	r2, [pc, #272]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x1f2>
 800183a:	2304      	movs	r3, #4
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800183e:	2307      	movs	r3, #7
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x204>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x204>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_GPIO_Init+0x300>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001892:	4a2e      	ldr	r2, [pc, #184]	; (800194c <HAL_GPIO_Init+0x300>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_GPIO_Init+0x300>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018bc:	4a23      	ldr	r2, [pc, #140]	; (800194c <HAL_GPIO_Init+0x300>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_GPIO_Init+0x300>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_GPIO_Init+0x300>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_GPIO_Init+0x300>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_GPIO_Init+0x300>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f aea2 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b08f      	sub	sp, #60	; 0x3c
 8001954:	af0a      	add	r7, sp, #40	; 0x28
 8001956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e10f      	b.n	8001b82 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f004 fec9 	bl	8006714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fe82 	bl	80036aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	687e      	ldr	r6, [r7, #4]
 80019ae:	466d      	mov	r5, sp
 80019b0:	f106 0410 	add.w	r4, r6, #16
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c4:	1d33      	adds	r3, r6, #4
 80019c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f001 fd59 	bl	8003480 <USB_CoreInit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0d0      	b.n	8001b82 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fe70 	bl	80036cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e04a      	b.n	8001a88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	333d      	adds	r3, #61	; 0x3d
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	333c      	adds	r3, #60	; 0x3c
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	b298      	uxth	r0, r3
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	4602      	mov	r2, r0
 8001a30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	333f      	adds	r3, #63	; 0x3f
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3344      	adds	r3, #68	; 0x44
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3348      	adds	r3, #72	; 0x48
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3350      	adds	r3, #80	; 0x50
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d3af      	bcc.n	80019f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e044      	b.n	8001b22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3b5      	bcc.n	8001a98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	687e      	ldr	r6, [r7, #4]
 8001b34:	466d      	mov	r5, sp
 8001b36:	f106 0410 	add.w	r4, r6, #16
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b4a:	1d33      	adds	r3, r6, #4
 8001b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4e:	6838      	ldr	r0, [r7, #0]
 8001b50:	f001 fde6 	bl	8003720 <USB_DevInit>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00d      	b.n	8001b82 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fe2e 	bl	80047dc <USB_DevDisconnect>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_PCD_Start+0x1c>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e020      	b.n	8001be8 <HAL_PCD_Start+0x5e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d109      	bne.n	8001bca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fd5a 	bl	8003688 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fdde 	bl	800479a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b08d      	sub	sp, #52	; 0x34
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fe9c 	bl	8004944 <USB_GetMode>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 839d 	bne.w	800234e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fe00 	bl	800481e <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8393 	beq.w	800234c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fdf7 	bl	800481e <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f002 0202 	and.w	r2, r2, #2
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fde5 	bl	800481e <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d161      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0210 	bic.w	r2, r2, #16
 8001c6c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	0c5b      	lsrs	r3, r3, #17
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d124      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d035      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6a38      	ldr	r0, [r7, #32]
 8001cba:	f002 fc4b 	bl	8004554 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cca:	441a      	add	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cdc:	441a      	add	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e016      	b.n	8001d12 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	0c5b      	lsrs	r3, r3, #17
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d110      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6a38      	ldr	r0, [r7, #32]
 8001cfc:	f002 fc2a 	bl	8004554 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0c:	441a      	add	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fd79 	bl	800481e <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d36:	d16e      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fd7f 	bl	8004844 <USB_ReadDevAllOutEpInterrupt>
 8001d46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d48:	e062      	b.n	8001e10 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d057      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fda4 	bl	80048ac <USB_ReadDevOutEPInterrupt>
 8001d64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00c      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fdb1 	bl	80028ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00c      	beq.n	8001dae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da0:	461a      	mov	r2, r3
 8001da2:	2308      	movs	r3, #8
 8001da4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 feab 	bl	8002b04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de0:	461a      	mov	r2, r3
 8001de2:	2320      	movs	r3, #32
 8001de4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3301      	adds	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d199      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fcff 	bl	800481e <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e2a:	f040 80c0 	bne.w	8001fae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fd20 	bl	8004878 <USB_ReadDevAllInEpInterrupt>
 8001e38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e3e:	e0b2      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80a7 	beq.w	8001f9a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fd46 	bl	80048e8 <USB_ReadDevInEPInterrupt>
 8001e5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d057      	beq.n	8001f18 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	2201      	movs	r2, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69f9      	ldr	r1, [r7, #28]
 8001e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e88:	4013      	ands	r3, r2
 8001e8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d132      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3348      	adds	r3, #72	; 0x48
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3344      	adds	r3, #68	; 0x44
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4419      	add	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4403      	add	r3, r0
 8001eda:	3348      	adds	r3, #72	; 0x48
 8001edc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d113      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x31c>
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3350      	adds	r3, #80	; 0x50
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f04:	461a      	mov	r2, r3
 8001f06:	2101      	movs	r1, #1
 8001f08:	f002 fd4e 	bl	80049a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f004 fc7f 	bl	8006816 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2308      	movs	r3, #8
 8001f32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f66:	461a      	mov	r2, r3
 8001f68:	2340      	movs	r3, #64	; 0x40
 8001f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f82:	461a      	mov	r2, r3
 8001f84:	2302      	movs	r3, #2
 8001f86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fc1b 	bl	80027d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af49 	bne.w	8001e40 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fc33 	bl	800481e <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fc2:	d122      	bne.n	800200a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fea:	2100      	movs	r1, #0
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fe27 	bl	8002c40 <HAL_PCDEx_LPM_Callback>
 8001ff2:	e002      	b.n	8001ffa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f004 fc7b 	bl	80068f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fc05 	bl	800481e <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800201e:	d112      	bne.n	8002046 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d102      	bne.n	8002036 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f004 fc37 	bl	80068a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002044:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fbe7 	bl	800481e <USB_ReadInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	f040 80c7 	bne.w	80021ec <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2110      	movs	r1, #16
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fcb5 	bl	80039e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002082:	e056      	b.n	8002132 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002090:	461a      	mov	r2, r3
 8002092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002096:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a8:	0151      	lsls	r1, r2, #5
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	440a      	add	r2, r1
 80020ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c8:	0151      	lsls	r1, r2, #5
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	440a      	add	r2, r1
 80020ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e4:	461a      	mov	r2, r3
 80020e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	440a      	add	r2, r1
 8002102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800210a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211c:	0151      	lsls	r1, r2, #5
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	440a      	add	r2, r1
 8002122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800212a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	3301      	adds	r3, #1
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002138:	429a      	cmp	r2, r3
 800213a:	d3a3      	bcc.n	8002084 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800214a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800214e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002168:	f043 030b 	orr.w	r3, r3, #11
 800216c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f043 030b 	orr.w	r3, r3, #11
 8002182:	6453      	str	r3, [r2, #68]	; 0x44
 8002184:	e015      	b.n	80021b2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002198:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800219c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ac:	f043 030b 	orr.w	r3, r3, #11
 80021b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021d6:	461a      	mov	r2, r3
 80021d8:	f002 fbe6 	bl	80049a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 fb14 	bl	800481e <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002200:	d124      	bne.n	800224c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fbaa 	bl	8004960 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fc4a 	bl	8003aaa <USB_GetDevSpeed>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681c      	ldr	r4, [r3, #0]
 8002222:	f001 f921 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8002226:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	4620      	mov	r0, r4
 8002232:	f001 f987 	bl	8003544 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f004 fb15 	bl	8006866 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800224a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f002 fae4 	bl	800481e <USB_ReadInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d10a      	bne.n	8002276 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f004 faf2 	bl	800684a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 0208 	and.w	r2, r2, #8
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 facf 	bl	800481e <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228a:	d10f      	bne.n	80022ac <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f004 fb4a 	bl	8006930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fab4 	bl	800481e <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022c0:	d10f      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f004 fb1d 	bl	800690c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fa99 	bl	800481e <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d10a      	bne.n	800230e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 fb2b 	bl	8006954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fa83 	bl	800481e <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d115      	bne.n	800234e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f004 fb1b 	bl	8006970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	e000      	b.n	800234e <HAL_PCD_IRQHandler+0x75e>
      return;
 800234c:	bf00      	nop
    }
  }
}
 800234e:	3734      	adds	r7, #52	; 0x34
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}

08002354 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_PCD_SetAddress+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e013      	b.n	8002396 <HAL_PCD_SetAddress+0x42>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 f9e1 	bl	800474e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4603      	mov	r3, r0
 80023ae:	70fb      	strb	r3, [r7, #3]
 80023b0:	460b      	mov	r3, r1
 80023b2:	803b      	strh	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da0f      	bge.n	80023e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	3338      	adds	r3, #56	; 0x38
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	3304      	adds	r3, #4
 80023da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	705a      	strb	r2, [r3, #1]
 80023e2:	e00f      	b.n	8002404 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002410:	883a      	ldrh	r2, [r7, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	78ba      	ldrb	r2, [r7, #2]
 800241a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800242e:	78bb      	ldrb	r3, [r7, #2]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d102      	bne.n	800243a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_PCD_EP_Open+0xaa>
 8002444:	2302      	movs	r3, #2
 8002446:	e00e      	b.n	8002466 <HAL_PCD_EP_Open+0xc8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f001 fb4c 	bl	8003af4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002464:	7afb      	ldrb	r3, [r7, #11]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800247a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800247e:	2b00      	cmp	r3, #0
 8002480:	da0f      	bge.n	80024a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	3338      	adds	r3, #56	; 0x38
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	705a      	strb	r2, [r3, #1]
 80024a0:	e00f      	b.n	80024c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_EP_Close+0x6e>
 80024d8:	2302      	movs	r3, #2
 80024da:	e00e      	b.n	80024fa <HAL_PCD_EP_Close+0x8c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f001 fb8a 	bl	8003c04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	460b      	mov	r3, r1
 8002510:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f003 020f 	and.w	r2, r3, #15
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6979      	ldr	r1, [r7, #20]
 8002576:	f001 fe65 	bl	8004244 <USB_EP0StartXfer>
 800257a:	e008      	b.n	800258e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	6979      	ldr	r1, [r7, #20]
 800258a:	f001 fc17 	bl	8003dbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	3338      	adds	r3, #56	; 0x38
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2201      	movs	r2, #1
 8002606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	b2da      	uxtb	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6979      	ldr	r1, [r7, #20]
 800263a:	f001 fe03 	bl	8004244 <USB_EP0StartXfer>
 800263e:	e008      	b.n	8002652 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	f001 fbb5 	bl	8003dbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d901      	bls.n	800267a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e050      	b.n	800271c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800267a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da0f      	bge.n	80026a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 020f 	and.w	r2, r3, #15
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	3338      	adds	r3, #56	; 0x38
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	705a      	strb	r2, [r3, #1]
 80026a0:	e00d      	b.n	80026be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_SetStall+0x82>
 80026da:	2302      	movs	r3, #2
 80026dc:	e01e      	b.n	800271c <HAL_PCD_EP_SetStall+0xc0>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 ff5a 	bl	80045a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	b2d9      	uxtb	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800270c:	461a      	mov	r2, r3
 800270e:	f002 f94b 	bl	80049a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d901      	bls.n	8002742 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e042      	b.n	80027c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da0f      	bge.n	800276a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	3338      	adds	r3, #56	; 0x38
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	705a      	strb	r2, [r3, #1]
 8002768:	e00f      	b.n	800278a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_PCD_EP_ClrStall+0x86>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e00e      	b.n	80027c8 <HAL_PCD_EP_ClrStall+0xa4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 ff62 	bl	8004682 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	3338      	adds	r3, #56	; 0x38
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	3304      	adds	r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d901      	bls.n	8002808 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e06c      	b.n	80028e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	429a      	cmp	r2, r3
 800281c:	d902      	bls.n	8002824 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3303      	adds	r3, #3
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800282c:	e02b      	b.n	8002886 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	429a      	cmp	r2, r3
 8002842:	d902      	bls.n	800284a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3303      	adds	r3, #3
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68d9      	ldr	r1, [r3, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002862:	b2db      	uxtb	r3, r3
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f001 fe3e 	bl	80044ea <USB_WritePacket>

    ep->xfer_buff  += len;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	441a      	add	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	441a      	add	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	b29b      	uxth	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	429a      	cmp	r2, r3
 800289a:	d809      	bhi.n	80028b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d203      	bcs.n	80028b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1be      	bne.n	800282e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d811      	bhi.n	80028e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	6939      	ldr	r1, [r7, #16]
 80028d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028dc:	4013      	ands	r3, r2
 80028de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	333c      	adds	r3, #60	; 0x3c
 8002904:	3304      	adds	r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	f040 80a0 	bne.w	8002a64 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a72      	ldr	r2, [pc, #456]	; (8002afc <PCD_EP_OutXfrComplete_int+0x210>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f240 80dd 	bls.w	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80d7 	beq.w	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	e0cb      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2320      	movs	r3, #32
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	e0bc      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80b7 	bne.w	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a5d      	ldr	r2, [pc, #372]	; (8002afc <PCD_EP_OutXfrComplete_int+0x210>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d90f      	bls.n	80029ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a8:	6093      	str	r3, [r2, #8]
 80029aa:	e0a2      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	440b      	add	r3, r1
 80029c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4403      	add	r3, r0
 80029e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4403      	add	r3, r0
 8002a0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4419      	add	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4403      	add	r3, r0
 8002a20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a24:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d114      	bne.n	8002a56 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2101      	movs	r1, #1
 8002a52:	f001 ffa9 	bl	80049a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f003 febf 	bl	80067e0 <HAL_PCD_DataOutStageCallback>
 8002a62:	e046      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d124      	bne.n	8002ab6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a88:	6093      	str	r3, [r2, #8]
 8002a8a:	e032      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f003 fe96 	bl	80067e0 <HAL_PCD_DataOutStageCallback>
 8002ab4:	e01d      	b.n	8002af2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d114      	bne.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f001 ff61 	bl	80049a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f003 fe77 	bl	80067e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	4f54300a 	.word	0x4f54300a
 8002b00:	4f54310a 	.word	0x4f54310a

08002b04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	333c      	adds	r3, #60	; 0x3c
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d90e      	bls.n	8002b58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f003 fe2f 	bl	80067bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d90c      	bls.n	8002b80 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	f001 ff14 	bl	80049a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	4f54300a 	.word	0x4f54300a

08002b90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bae:	883b      	ldrh	r3, [r7, #0]
 8002bb0:	0419      	lsls	r1, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
 8002bbc:	e028      	b.n	8002c10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	4413      	add	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e00d      	b.n	8002bee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3340      	adds	r3, #64	; 0x40
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4413      	add	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	3301      	adds	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3ec      	bcc.n	8002bd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bf8:	883b      	ldrh	r3, [r7, #0]
 8002bfa:	0418      	lsls	r0, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4302      	orrs	r2, r0
 8002c08:	3340      	adds	r3, #64	; 0x40
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e25b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d075      	beq.n	8002d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	4ba3      	ldr	r3, [pc, #652]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e236      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x74>
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a90      	ldr	r2, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002cf0:	4b84      	ldr	r3, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a83      	ldr	r2, [pc, #524]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fd fede 	bl	8000ad0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fd feda 	bl	8000ad0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1fb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xc0>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fd feca 	bl	8000ad0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fd fec6 	bl	8000ad0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1e7      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0xe8>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1bb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4952      	ldr	r1, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fd fe7f 	bl	8000ad0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fd fe7b 	bl	8000ad0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e19c      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4940      	ldr	r1, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fd fe5e 	bl	8000ad0 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fd fe5a 	bl	8000ad0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e17b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d030      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fd fe3e 	bl	8000ad0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fd fe3a 	bl	8000ad0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e15b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x200>
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fd fe27 	bl	8000ad0 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fd fe23 	bl	8000ad0 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e144      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a0 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efa:	f7fd fde9 	bl	8000ad0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	e011      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
 8002f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fd fddc 	bl	8000ad0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0fd      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	e01c      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x312>
 8002f50:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a76      	ldr	r2, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f6a:	4b71      	ldr	r3, [pc, #452]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b6e      	ldr	r3, [pc, #440]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fd fda1 	bl	8000ad0 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fd fd9d 	bl	8000ad0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0bc      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RCC_OscConfig+0x33a>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fd8b 	bl	8000ad0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fd fd87 	bl	8000ad0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0a6      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a51      	ldr	r2, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8092 	beq.w	8003120 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d05c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d141      	bne.n	8003094 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fd fd5b 	bl	8000ad0 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd fd57 	bl	8000ad0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e078      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	4933      	ldr	r1, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	4b33      	ldr	r3, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fd30 	bl	8000ad0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fd2c 	bl	8000ad0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04d      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x41c>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fd fd19 	bl	8000ad0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fd fd15 	bl	8000ad0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e036      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x44a>
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e029      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d115      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40007000 	.word	0x40007000
 8003130:	40023800 	.word	0x40023800
 8003134:	42470060 	.word	0x42470060

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fd fc52 	bl	8000ad0 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd fc4e 	bl	8000ad0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	fa21 f303 	lsr.w	r3, r1, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fbb2 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08007610 	.word	0x08007610
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d007      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x32>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d008      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x38>
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 808d 	bne.w	800344a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003332:	60bb      	str	r3, [r7, #8]
       break;
 8003334:	e08c      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	e089      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d023      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea03 0501 	and.w	r5, r3, r1
 8003368:	ea04 0602 	and.w	r6, r4, r2
 800336c:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 800336e:	fb02 f106 	mul.w	r1, r2, r6
 8003372:	2200      	movs	r2, #0
 8003374:	fb02 f205 	mul.w	r2, r2, r5
 8003378:	440a      	add	r2, r1
 800337a:	493a      	ldr	r1, [pc, #232]	; (8003464 <HAL_RCC_GetSysClockFreq+0x160>)
 800337c:	fba5 0101 	umull	r0, r1, r5, r1
 8003380:	1853      	adds	r3, r2, r1
 8003382:	4619      	mov	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 0400 	mov.w	r4, #0
 800338a:	461a      	mov	r2, r3
 800338c:	4623      	mov	r3, r4
 800338e:	f7fc ff77 	bl	8000280 <__aeabi_uldivmod>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e049      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	ea03 0501 	and.w	r5, r3, r1
 80033b0:	ea04 0602 	and.w	r6, r4, r2
 80033b4:	4629      	mov	r1, r5
 80033b6:	4632      	mov	r2, r6
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0154      	lsls	r4, r2, #5
 80033c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033c6:	014b      	lsls	r3, r1, #5
 80033c8:	4619      	mov	r1, r3
 80033ca:	4622      	mov	r2, r4
 80033cc:	1b49      	subs	r1, r1, r5
 80033ce:	eb62 0206 	sbc.w	r2, r2, r6
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0194      	lsls	r4, r2, #6
 80033dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	1a5b      	subs	r3, r3, r1
 80033e4:	eb64 0402 	sbc.w	r4, r4, r2
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	00e2      	lsls	r2, r4, #3
 80033f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	460b      	mov	r3, r1
 80033fa:	4614      	mov	r4, r2
 80033fc:	195b      	adds	r3, r3, r5
 80033fe:	eb44 0406 	adc.w	r4, r4, r6
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	02a2      	lsls	r2, r4, #10
 800340c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003410:	0299      	lsls	r1, r3, #10
 8003412:	460b      	mov	r3, r1
 8003414:	4614      	mov	r4, r2
 8003416:	4618      	mov	r0, r3
 8003418:	4621      	mov	r1, r4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	f7fc ff2c 	bl	8000280 <__aeabi_uldivmod>
 8003428:	4603      	mov	r3, r0
 800342a:	460c      	mov	r4, r1
 800342c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetSysClockFreq+0x158>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	3301      	adds	r3, #1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	60bb      	str	r3, [r7, #8]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x15c>)
 800344c:	60bb      	str	r3, [r7, #8]
      break;
 800344e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003450:	68bb      	ldr	r3, [r7, #8]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	017d7840 	.word	0x017d7840

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003480:	b084      	sub	sp, #16
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	f107 001c 	add.w	r0, r7, #28
 800348e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d122      	bne.n	80034de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f001 fac6 	bl	8004a64 <USB_CoreReset>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e01a      	b.n	8003514 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f001 faba 	bl	8004a64 <USB_CoreReset>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
 8003506:	e005      	b.n	8003514 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10b      	bne.n	8003532 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f043 0206 	orr.w	r2, r3, #6
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800353e:	b004      	add	sp, #16
 8003540:	4770      	bx	lr
	...

08003544 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d165      	bne.n	8003624 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a41      	ldr	r2, [pc, #260]	; (8003660 <USB_SetTurnaroundTime+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d906      	bls.n	800356e <USB_SetTurnaroundTime+0x2a>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4a40      	ldr	r2, [pc, #256]	; (8003664 <USB_SetTurnaroundTime+0x120>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d802      	bhi.n	800356e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003568:	230f      	movs	r3, #15
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e062      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <USB_SetTurnaroundTime+0x120>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d906      	bls.n	8003584 <USB_SetTurnaroundTime+0x40>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <USB_SetTurnaroundTime+0x124>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800357e:	230e      	movs	r3, #14
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e057      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a38      	ldr	r2, [pc, #224]	; (8003668 <USB_SetTurnaroundTime+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d906      	bls.n	800359a <USB_SetTurnaroundTime+0x56>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4a37      	ldr	r2, [pc, #220]	; (800366c <USB_SetTurnaroundTime+0x128>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d802      	bhi.n	800359a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003594:	230d      	movs	r3, #13
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e04c      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4a33      	ldr	r2, [pc, #204]	; (800366c <USB_SetTurnaroundTime+0x128>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d906      	bls.n	80035b0 <USB_SetTurnaroundTime+0x6c>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a32      	ldr	r2, [pc, #200]	; (8003670 <USB_SetTurnaroundTime+0x12c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d802      	bhi.n	80035b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035aa:	230c      	movs	r3, #12
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e041      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <USB_SetTurnaroundTime+0x12c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d906      	bls.n	80035c6 <USB_SetTurnaroundTime+0x82>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a2e      	ldr	r2, [pc, #184]	; (8003674 <USB_SetTurnaroundTime+0x130>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d802      	bhi.n	80035c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035c0:	230b      	movs	r3, #11
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e036      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <USB_SetTurnaroundTime+0x130>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d906      	bls.n	80035dc <USB_SetTurnaroundTime+0x98>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a29      	ldr	r2, [pc, #164]	; (8003678 <USB_SetTurnaroundTime+0x134>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d802      	bhi.n	80035dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035d6:	230a      	movs	r3, #10
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e02b      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a26      	ldr	r2, [pc, #152]	; (8003678 <USB_SetTurnaroundTime+0x134>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d906      	bls.n	80035f2 <USB_SetTurnaroundTime+0xae>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <USB_SetTurnaroundTime+0x138>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d802      	bhi.n	80035f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035ec:	2309      	movs	r3, #9
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e020      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <USB_SetTurnaroundTime+0x138>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d906      	bls.n	8003608 <USB_SetTurnaroundTime+0xc4>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <USB_SetTurnaroundTime+0x13c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003602:	2308      	movs	r3, #8
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e015      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <USB_SetTurnaroundTime+0x13c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d906      	bls.n	800361e <USB_SetTurnaroundTime+0xda>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <USB_SetTurnaroundTime+0x140>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d802      	bhi.n	800361e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003618:	2307      	movs	r3, #7
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00a      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800361e:	2306      	movs	r3, #6
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e007      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800362a:	2309      	movs	r3, #9
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e001      	b.n	8003634 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003630:	2309      	movs	r3, #9
 8003632:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	00d8acbf 	.word	0x00d8acbf
 8003664:	00e4e1bf 	.word	0x00e4e1bf
 8003668:	00f423ff 	.word	0x00f423ff
 800366c:	0106737f 	.word	0x0106737f
 8003670:	011a499f 	.word	0x011a499f
 8003674:	01312cff 	.word	0x01312cff
 8003678:	014ca43f 	.word	0x014ca43f
 800367c:	016e35ff 	.word	0x016e35ff
 8003680:	01a6ab1f 	.word	0x01a6ab1f
 8003684:	01e847ff 	.word	0x01e847ff

08003688 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	e00b      	b.n	8003710 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e001      	b.n	8003710 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e003      	b.n	8003718 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003710:	2032      	movs	r0, #50	; 0x32
 8003712:	f7fd f9e9 	bl	8000ae8 <HAL_Delay>

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003720:	b084      	sub	sp, #16
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800372e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e009      	b.n	8003754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3340      	adds	r3, #64	; 0x40
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3301      	adds	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b0e      	cmp	r3, #14
 8003758:	d9f2      	bls.n	8003740 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11c      	bne.n	800379a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f043 0302 	orr.w	r3, r3, #2
 8003772:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
 8003798:	e00b      	b.n	80037b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c4:	4619      	mov	r1, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037cc:	461a      	mov	r2, r3
 80037ce:	680b      	ldr	r3, [r1, #0]
 80037d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10c      	bne.n	80037f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037de:	2100      	movs	r1, #0
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f949 	bl	8003a78 <USB_SetDevSpeed>
 80037e6:	e008      	b.n	80037fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037e8:	2101      	movs	r1, #1
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f944 	bl	8003a78 <USB_SetDevSpeed>
 80037f0:	e003      	b.n	80037fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037f2:	2103      	movs	r1, #3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f93f 	bl	8003a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037fa:	2110      	movs	r1, #16
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8f3 	bl	80039e8 <USB_FlushTxFifo>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f911 	bl	8003a34 <USB_FlushRxFifo>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	e043      	b.n	80038ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385c:	d118      	bne.n	8003890 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e013      	b.n	80038a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	461a      	mov	r2, r3
 8003888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e008      	b.n	80038a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	461a      	mov	r2, r3
 80038c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3301      	adds	r3, #1
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3b7      	bcc.n	8003846 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e043      	b.n	8003964 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f2:	d118      	bne.n	8003926 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e013      	b.n	8003938 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	461a      	mov	r2, r3
 800391e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e008      	b.n	8003938 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	461a      	mov	r2, r3
 8003934:	2300      	movs	r3, #0
 8003936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	2300      	movs	r3, #0
 8003948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	461a      	mov	r2, r3
 8003958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800395c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3301      	adds	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	429a      	cmp	r2, r3
 800396a:	d3b7      	bcc.n	80038dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800397a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <USB_DevInit+0x2c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039e0:	b004      	add	sp, #16
 80039e2:	4770      	bx	lr
 80039e4:	803c3800 	.word	0x803c3800

080039e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <USB_FlushTxFifo+0x48>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d0f0      	beq.n	8003a02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	00030d40 	.word	0x00030d40

08003a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2210      	movs	r2, #16
 8003a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <USB_FlushRxFifo+0x40>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e006      	b.n	8003a66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d0f0      	beq.n	8003a46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	00030d40 	.word	0x00030d40

08003a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
 8003ace:	e00a      	b.n	8003ae6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d002      	beq.n	8003adc <USB_GetDevSpeed+0x32>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d102      	bne.n	8003ae2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003adc:	2302      	movs	r3, #2
 8003ade:	75fb      	strb	r3, [r7, #23]
 8003ae0:	e001      	b.n	8003ae6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d13a      	bne.n	8003b86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d155      	bne.n	8003bf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	059b      	lsls	r3, r3, #22
 8003b6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e036      	b.n	8003bf4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11a      	bne.n	8003bf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d161      	bne.n	8003ce4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c36:	d11f      	bne.n	8003c78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c98:	4013      	ands	r3, r2
 8003c9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2101      	movs	r1, #1
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0159      	lsls	r1, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <USB_DeactivateEndpoint+0x1b0>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
 8003ce2:	e060      	b.n	8003da6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfa:	d11f      	bne.n	8003d3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	43db      	mvns	r3, r3
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d80:	4013      	ands	r3, r2
 8003d82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0159      	lsls	r1, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <USB_DeactivateEndpoint+0x1b4>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	ec337800 	.word	0xec337800
 8003db8:	eff37800 	.word	0xeff37800

08003dbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 815c 	bne.w	8004096 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d132      	bne.n	8003e4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e44:	0cdb      	lsrs	r3, r3, #19
 8003e46:	04db      	lsls	r3, r3, #19
 8003e48:	6113      	str	r3, [r2, #16]
 8003e4a:	e074      	b.n	8003f36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	0cdb      	lsrs	r3, r3, #19
 8003e68:	04db      	lsls	r3, r3, #19
 8003e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6959      	ldr	r1, [r3, #20]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	440b      	add	r3, r1
 8003ea8:	1e59      	subs	r1, r3, #1
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb2:	04d9      	lsls	r1, r3, #19
 8003eb4:	4b9d      	ldr	r3, [pc, #628]	; (800412c <USB_EPStartXfer+0x370>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	0148      	lsls	r0, r1, #5
 8003ebc:	69f9      	ldr	r1, [r7, #28]
 8003ebe:	4401      	add	r1, r0
 8003ec0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	0148      	lsls	r0, r1, #5
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	4401      	add	r1, r0
 8003ee6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d11f      	bne.n	8003f36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d14b      	bne.n	8003fd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	78db      	ldrb	r3, [r3, #3]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d128      	bne.n	8003fb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d110      	bne.n	8003f92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e00f      	b.n	8003fb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e12f      	b.n	8004234 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ff2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	78db      	ldrb	r3, [r3, #3]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d015      	beq.n	8004028 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8117 	beq.w	8004234 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004022:	4313      	orrs	r3, r2
 8004024:	634b      	str	r3, [r1, #52]	; 0x34
 8004026:	e105      	b.n	8004234 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d110      	bne.n	800405a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e00f      	b.n	800407a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	b298      	uxth	r0, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fa2b 	bl	80044ea <USB_WritePacket>
 8004094:	e0ce      	b.n	8004234 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b0:	0cdb      	lsrs	r3, r3, #19
 80040b2:	04db      	lsls	r3, r3, #19
 80040b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d126      	bne.n	8004130 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	0148      	lsls	r0, r1, #5
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	4401      	add	r1, r0
 8004100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004126:	6113      	str	r3, [r2, #16]
 8004128:	e036      	b.n	8004198 <USB_EPStartXfer+0x3dc>
 800412a:	bf00      	nop
 800412c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4413      	add	r3, r2
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	8afb      	ldrh	r3, [r7, #22]
 8004156:	04d9      	lsls	r1, r3, #19
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <USB_EPStartXfer+0x484>)
 800415a:	400b      	ands	r3, r1
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	0148      	lsls	r0, r1, #5
 8004160:	69f9      	ldr	r1, [r7, #28]
 8004162:	4401      	add	r1, r0
 8004164:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	8af9      	ldrh	r1, [r7, #22]
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	0148      	lsls	r0, r1, #5
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	4401      	add	r1, r0
 8004190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	460a      	mov	r2, r1
 80041b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	78db      	ldrb	r3, [r3, #3]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d128      	bne.n	8004214 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d110      	bne.n	80041f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00f      	b.n	8004214 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004212:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	1ff80000 	.word	0x1ff80000

08004244 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 80cd 	bne.w	8004400 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d132      	bne.n	80042d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800428c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	0cdb      	lsrs	r3, r3, #19
 80042ce:	04db      	lsls	r3, r3, #19
 80042d0:	6113      	str	r3, [r2, #16]
 80042d2:	e04e      	b.n	8004372 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	0cdb      	lsrs	r3, r3, #19
 80042f0:	04db      	lsls	r3, r3, #19
 80042f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004316:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d903      	bls.n	800432c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800434a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	6939      	ldr	r1, [r7, #16]
 8004364:	0148      	lsls	r0, r1, #5
 8004366:	6979      	ldr	r1, [r7, #20]
 8004368:	4401      	add	r1, r0
 800436a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d11e      	bne.n	80043b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e092      	b.n	80044dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d07e      	beq.n	80044dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043fa:	4313      	orrs	r3, r2
 80043fc:	634b      	str	r3, [r1, #52]	; 0x34
 80043fe:	e06d      	b.n	80044dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441a:	0cdb      	lsrs	r3, r3, #19
 800441c:	04db      	lsls	r3, r3, #19
 800441e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800443e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004442:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	0148      	lsls	r0, r1, #5
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	4401      	add	r1, r0
 8004492:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10d      	bne.n	80044bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	68d9      	ldr	r1, [r3, #12]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	460a      	mov	r2, r1
 80044ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b089      	sub	sp, #36	; 0x24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	4611      	mov	r1, r2
 80044f6:	461a      	mov	r2, r3
 80044f8:	460b      	mov	r3, r1
 80044fa:	71fb      	strb	r3, [r7, #7]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004508:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11a      	bne.n	8004546 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	3303      	adds	r3, #3
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e00f      	b.n	800453e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	031a      	lsls	r2, r3, #12
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3304      	adds	r3, #4
 8004536:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	3301      	adds	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d3eb      	bcc.n	800451e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3724      	adds	r7, #36	; 0x24
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	3303      	adds	r3, #3
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e00b      	b.n	8004590 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	601a      	str	r2, [r3, #0]
    pDest++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3304      	adds	r3, #4
 8004588:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3301      	adds	r3, #1
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3ef      	bcc.n	8004578 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004598:	69fb      	ldr	r3, [r7, #28]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d12c      	bne.n	800461c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db12      	blt.n	80045fa <USB_EPSetStall+0x54>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00f      	beq.n	80045fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e02b      	b.n	8004674 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db12      	blt.n	8004654 <USB_EPSetStall+0xae>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00f      	beq.n	8004654 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004652:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d128      	bne.n	80046f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	78db      	ldrb	r3, [r3, #3]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d003      	beq.n	80046ce <USB_EPClearStall+0x4c>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	78db      	ldrb	r3, [r3, #3]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d138      	bne.n	8004740 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e027      	b.n	8004740 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800470e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	78db      	ldrb	r3, [r3, #3]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <USB_EPClearStall+0x9e>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	78db      	ldrb	r3, [r3, #3]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d10f      	bne.n	8004740 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004770:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047b4:	f023 0303 	bic.w	r3, r3, #3
 80047b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c8:	f023 0302 	bic.w	r3, r3, #2
 80047cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	0c1b      	lsrs	r3, r3, #16
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	b29b      	uxth	r3, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	b2db      	uxtb	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004936:	68bb      	ldr	r3, [r7, #8]
}
 8004938:	4618      	mov	r0, r3
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0301 	and.w	r3, r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	460b      	mov	r3, r1
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	333c      	adds	r3, #60	; 0x3c
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <USB_EP0_OutStart+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d90a      	bls.n	80049e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049dc:	d101      	bne.n	80049e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e037      	b.n	8004a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 0318 	orr.w	r3, r3, #24
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10f      	bne.n	8004a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	4f54300a 	.word	0x4f54300a

08004a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <USB_CoreReset+0x64>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e01b      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	daf2      	bge.n	8004a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <USB_CoreReset+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d0f0      	beq.n	8004a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004adc:	f002 f936 	bl	8006d4c <malloc>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004af2:	2302      	movs	r3, #2
 8004af4:	e066      	b.n	8004bc4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7c1b      	ldrb	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	2181      	movs	r1, #129	; 0x81
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 ffa3 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1e:	2202      	movs	r2, #2
 8004b20:	2101      	movs	r1, #1
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f001 ff99 	bl	8006a5a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2210      	movs	r2, #16
 8004b34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b38:	e016      	b.n	8004b68 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	2181      	movs	r1, #129	; 0x81
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 ff8a 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	2202      	movs	r2, #2
 8004b50:	2101      	movs	r1, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 ff81 	bl	8006a5a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2210      	movs	r2, #16
 8004b64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b68:	2308      	movs	r3, #8
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	2182      	movs	r1, #130	; 0x82
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 ff73 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7c1b      	ldrb	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba8:	2101      	movs	r1, #1
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f002 f844 	bl	8006c38 <USBD_LL_PrepareReceive>
 8004bb0:	e007      	b.n	8004bc2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bb8:	2340      	movs	r3, #64	; 0x40
 8004bba:	2101      	movs	r1, #1
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f002 f83b 	bl	8006c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004bdc:	2181      	movs	r1, #129	; 0x81
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 ff61 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 ff5a 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004bfa:	2182      	movs	r1, #130	; 0x82
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 ff52 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 f895 	bl	8006d5c <free>
    pdev->pClassData = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03a      	beq.n	8004ce4 <USBD_CDC_Setup+0xa0>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	f040 8097 	bne.w	8004da2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	88db      	ldrh	r3, [r3, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d029      	beq.n	8004cd0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da11      	bge.n	8004caa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004c92:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	88d2      	ldrh	r2, [r2, #6]
 8004c98:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c9a:	6939      	ldr	r1, [r7, #16]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	88db      	ldrh	r3, [r3, #6]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 fa9d 	bl	80061e2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004ca8:	e082      	b.n	8004db0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	785a      	ldrb	r2, [r3, #1]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	88db      	ldrh	r3, [r3, #6]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004cc0:	6939      	ldr	r1, [r7, #16]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	88db      	ldrh	r3, [r3, #6]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 fab6 	bl	800623a <USBD_CtlPrepareRx>
    break;
 8004cce:	e06f      	b.n	8004db0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	7850      	ldrb	r0, [r2, #1]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	4798      	blx	r3
    break;
 8004ce2:	e065      	b.n	8004db0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b0b      	cmp	r3, #11
 8004cea:	d84f      	bhi.n	8004d8c <USBD_CDC_Setup+0x148>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <USBD_CDC_Setup+0xb0>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d9b 	.word	0x08004d9b
 8004cfc:	08004d8d 	.word	0x08004d8d
 8004d00:	08004d8d 	.word	0x08004d8d
 8004d04:	08004d8d 	.word	0x08004d8d
 8004d08:	08004d8d 	.word	0x08004d8d
 8004d0c:	08004d8d 	.word	0x08004d8d
 8004d10:	08004d8d 	.word	0x08004d8d
 8004d14:	08004d8d 	.word	0x08004d8d
 8004d18:	08004d8d 	.word	0x08004d8d
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d75 	.word	0x08004d75
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	2202      	movs	r2, #2
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f001 fa53 	bl	80061e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d3c:	e030      	b.n	8004da0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 f9dd 	bl	8006100 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d46:	2303      	movs	r3, #3
 8004d48:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4a:	e029      	b.n	8004da0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d56:	f107 030f 	add.w	r3, r7, #15
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fa3f 	bl	80061e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d64:	e01c      	b.n	8004da0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 f9c9 	bl	8006100 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	e015      	b.n	8004da0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d00f      	beq.n	8004d9e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 f9bd 	bl	8006100 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d8a:	e008      	b.n	8004d9e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 f9b6 	bl	8006100 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d94:	2303      	movs	r3, #3
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	e002      	b.n	8004da0 <USBD_CDC_Setup+0x15c>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e008      	b.n	8004db0 <USBD_CDC_Setup+0x16c>
      break;
 8004d9e:	bf00      	nop
    }
    break;
 8004da0:	e006      	b.n	8004db0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 f9ab 	bl	8006100 <USBD_CtlError>
    ret = USBD_FAIL;
 8004daa:	2303      	movs	r3, #3
 8004dac:	75fb      	strb	r3, [r7, #23]
    break;
 8004dae:	bf00      	nop
  }

  return (uint8_t)ret;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop

08004dbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e049      	b.n	8004e72 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004de4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3318      	adds	r3, #24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d029      	beq.n	8004e50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	78f9      	ldrb	r1, [r7, #3]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	460b      	mov	r3, r1
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	1a5b      	subs	r3, r3, r1
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4403      	add	r3, r0
 8004e1c:	3344      	adds	r3, #68	; 0x44
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e24:	fb03 f301 	mul.w	r3, r3, r1
 8004e28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d110      	bne.n	8004e50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3318      	adds	r3, #24
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e42:	78f9      	ldrb	r1, [r7, #3]
 8004e44:	2300      	movs	r3, #0
 8004e46:	2200      	movs	r2, #0
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fed4 	bl	8006bf6 <USBD_LL_Transmit>
 8004e4e:	e00f      	b.n	8004e70 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e015      	b.n	8004ec8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 feea 	bl	8006c7a <USBD_LL_GetRxDataSize>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ede:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d015      	beq.n	8004f16 <USBD_CDC_EP0_RxReady+0x46>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ef0:	2bff      	cmp	r3, #255	; 0xff
 8004ef2:	d010      	beq.n	8004f16 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004f02:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2243      	movs	r2, #67	; 0x43
 8004f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004f2e:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000094 	.word	0x20000094

08004f40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2243      	movs	r2, #67	; 0x43
 8004f4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f4e:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000050 	.word	0x20000050

08004f60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2243      	movs	r2, #67	; 0x43
 8004f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f6e:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	200000d8 	.word	0x200000d8

08004f80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f8e:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e004      	b.n	8004fbe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fdc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005032:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005042:	2303      	movs	r3, #3
 8005044:	e01a      	b.n	800507c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800504c:	2b00      	cmp	r3, #0
 800504e:	d114      	bne.n	800507a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2201      	movs	r2, #1
 8005054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800506e:	2181      	movs	r1, #129	; 0x81
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 fdc0 	bl	8006bf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800509e:	2303      	movs	r3, #3
 80050a0:	e016      	b.n	80050d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7c1b      	ldrb	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b4:	2101      	movs	r1, #1
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 fdbe 	bl	8006c38 <USBD_LL_PrepareReceive>
 80050bc:	e007      	b.n	80050ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050c4:	2340      	movs	r3, #64	; 0x40
 80050c6:	2101      	movs	r1, #1
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 fdb5 	bl	8006c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e025      	b.n	800513c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	79fa      	ldrb	r2, [r7, #7]
 800512e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f001 fc2b 	bl	800698c <USBD_LL_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

  return ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005158:	2303      	movs	r3, #3
 800515a:	e010      	b.n	800517e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f107 020e 	add.w	r2, r7, #14
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fc48 	bl	8006a24 <USBD_LL_Start>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80051c0:	2303      	movs	r3, #3
 80051c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	4611      	mov	r1, r2
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	4611      	mov	r1, r2
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
  }

  return USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 ff2c 	bl	800608c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005242:	461a      	mov	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2b01      	cmp	r3, #1
 8005256:	d00e      	beq.n	8005276 <USBD_LL_SetupStage+0x5a>
 8005258:	2b01      	cmp	r3, #1
 800525a:	d302      	bcc.n	8005262 <USBD_LL_SetupStage+0x46>
 800525c:	2b02      	cmp	r3, #2
 800525e:	d014      	beq.n	800528a <USBD_LL_SetupStage+0x6e>
 8005260:	e01d      	b.n	800529e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa18 	bl	80056a0 <USBD_StdDevReq>
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e020      	b.n	80052b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa7c 	bl	800577c <USBD_StdItfReq>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e016      	b.n	80052b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fab8 	bl	8005808 <USBD_StdEPReq>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e00c      	b.n	80052b8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 fc19 	bl	8006ae4 <USBD_LL_StallEP>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
      break;
 80052b6:	bf00      	nop
  }

  return ret;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	460b      	mov	r3, r1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052d0:	7afb      	ldrb	r3, [r7, #11]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d137      	bne.n	8005346 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d14a      	bne.n	800537e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d913      	bls.n	800531c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	1ad2      	subs	r2, r2, r3
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4293      	cmp	r3, r2
 800530c:	bf28      	it	cs
 800530e:	4613      	movcs	r3, r2
 8005310:	461a      	mov	r2, r3
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 ffad 	bl	8006274 <USBD_CtlContinueRx>
 800531a:	e030      	b.n	800537e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800532e:	2b03      	cmp	r3, #3
 8005330:	d105      	bne.n	800533e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 ffa9 	bl	8006296 <USBD_CtlSendStatus>
 8005344:	e01b      	b.n	800537e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d013      	beq.n	800537a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005358:	2b03      	cmp	r3, #3
 800535a:	d10e      	bne.n	800537a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	7afa      	ldrb	r2, [r7, #11]
 8005366:	4611      	mov	r1, r2
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	4798      	blx	r3
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	e002      	b.n	8005380 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800537a:	2303      	movs	r3, #3
 800537c:	e000      	b.n	8005380 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	460b      	mov	r3, r1
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d16a      	bne.n	8005472 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3314      	adds	r3, #20
 80053a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d155      	bne.n	8005458 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d914      	bls.n	80053e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	1ad2      	subs	r2, r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 ff22 	bl	8006218 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053d4:	2300      	movs	r3, #0
 80053d6:	2200      	movs	r2, #0
 80053d8:	2100      	movs	r1, #0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 fc2c 	bl	8006c38 <USBD_LL_PrepareReceive>
 80053e0:	e03a      	b.n	8005458 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d11c      	bne.n	8005428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d316      	bcc.n	8005428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005404:	429a      	cmp	r2, r3
 8005406:	d20f      	bcs.n	8005428 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005408:	2200      	movs	r2, #0
 800540a:	2100      	movs	r1, #0
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 ff03 	bl	8006218 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800541a:	2300      	movs	r3, #0
 800541c:	2200      	movs	r2, #0
 800541e:	2100      	movs	r1, #0
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f001 fc09 	bl	8006c38 <USBD_LL_PrepareReceive>
 8005426:	e017      	b.n	8005458 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800543a:	2b03      	cmp	r3, #3
 800543c:	d105      	bne.n	800544a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f001 fb49 	bl	8006ae4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 ff32 	bl	80062bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800545e:	2b01      	cmp	r3, #1
 8005460:	d123      	bne.n	80054aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fe9b 	bl	800519e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005470:	e01b      	b.n	80054aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005484:	2b03      	cmp	r3, #3
 8005486:	d10e      	bne.n	80054a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	7afa      	ldrb	r2, [r7, #11]
 8005492:	4611      	mov	r1, r2
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	4798      	blx	r3
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	e002      	b.n	80054ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e000      	b.n	80054ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6852      	ldr	r2, [r2, #4]
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	4611      	mov	r1, r2
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054f8:	2340      	movs	r3, #64	; 0x40
 80054fa:	2200      	movs	r2, #0
 80054fc:	2100      	movs	r1, #0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 faab 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	2200      	movs	r2, #0
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fa9d 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	2b04      	cmp	r3, #4
 8005590:	d105      	bne.n	800559e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d10b      	bne.n	80055d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6852      	ldr	r2, [r2, #4]
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	4611      	mov	r1, r2
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
  }

  return USBD_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005680:	8a3b      	ldrh	r3, [r7, #16]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	b21a      	sxth	r2, r3
 8005686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800568a:	4313      	orrs	r3, r2
 800568c:	b21b      	sxth	r3, r3
 800568e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005690:	89fb      	ldrh	r3, [r7, #14]
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d004      	beq.n	80056c4 <USBD_StdDevReq+0x24>
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d002      	beq.n	80056c4 <USBD_StdDevReq+0x24>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <USBD_StdDevReq+0x38>
 80056c2:	e050      	b.n	8005766 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	73fb      	strb	r3, [r7, #15]
    break;
 80056d6:	e04b      	b.n	8005770 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d83c      	bhi.n	800575a <USBD_StdDevReq+0xba>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <USBD_StdDevReq+0x48>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	08005751 	.word	0x08005751
 80056f0:	0800575b 	.word	0x0800575b
 80056f4:	08005747 	.word	0x08005747
 80056f8:	0800575b 	.word	0x0800575b
 80056fc:	0800571b 	.word	0x0800571b
 8005700:	08005711 	.word	0x08005711
 8005704:	0800575b 	.word	0x0800575b
 8005708:	08005733 	.word	0x08005733
 800570c:	08005725 	.word	0x08005725
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9ce 	bl	8005ab4 <USBD_GetDescriptor>
      break;
 8005718:	e024      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb33 	bl	8005d88 <USBD_SetAddress>
      break;
 8005722:	e01f      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb70 	bl	8005e0c <USBD_SetConfig>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e018      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fc0d 	bl	8005f54 <USBD_GetConfig>
      break;
 800573a:	e013      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fc3c 	bl	8005fbc <USBD_GetStatus>
      break;
 8005744:	e00e      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fc6a 	bl	8006022 <USBD_SetFeature>
      break;
 800574e:	e009      	b.n	8005764 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fc79 	bl	800604a <USBD_ClrFeature>
      break;
 8005758:	e004      	b.n	8005764 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fccf 	bl	8006100 <USBD_CtlError>
      break;
 8005762:	bf00      	nop
    }
    break;
 8005764:	e004      	b.n	8005770 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fcc9 	bl	8006100 <USBD_CtlError>
    break;
 800576e:	bf00      	nop
  }

  return ret;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005792:	2b20      	cmp	r3, #32
 8005794:	d003      	beq.n	800579e <USBD_StdItfReq+0x22>
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d001      	beq.n	800579e <USBD_StdItfReq+0x22>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d12a      	bne.n	80057f4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	3b01      	subs	r3, #1
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d81d      	bhi.n	80057e6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	889b      	ldrh	r3, [r3, #4]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d813      	bhi.n	80057dc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	88db      	ldrh	r3, [r3, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d110      	bne.n	80057f0 <USBD_StdItfReq+0x74>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fd5e 	bl	8006296 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80057da:	e009      	b.n	80057f0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fc8e 	bl	8006100 <USBD_CtlError>
      break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fc89 	bl	8006100 <USBD_CtlError>
      break;
 80057ee:	e000      	b.n	80057f2 <USBD_StdItfReq+0x76>
      break;
 80057f0:	bf00      	nop
    }
    break;
 80057f2:	e004      	b.n	80057fe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fc82 	bl	8006100 <USBD_CtlError>
    break;
 80057fc:	bf00      	nop
  }

  return ret;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	889b      	ldrh	r3, [r3, #4]
 800581a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005824:	2b20      	cmp	r3, #32
 8005826:	d004      	beq.n	8005832 <USBD_StdEPReq+0x2a>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d002      	beq.n	8005832 <USBD_StdEPReq+0x2a>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <USBD_StdEPReq+0x3e>
 8005830:	e135      	b.n	8005a9e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]
    break;
 8005844:	e130      	b.n	8005aa8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d03e      	beq.n	80058cc <USBD_StdEPReq+0xc4>
 800584e:	2b03      	cmp	r3, #3
 8005850:	d002      	beq.n	8005858 <USBD_StdEPReq+0x50>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d077      	beq.n	8005946 <USBD_StdEPReq+0x13e>
 8005856:	e11c      	b.n	8005a92 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585e:	2b02      	cmp	r3, #2
 8005860:	d002      	beq.n	8005868 <USBD_StdEPReq+0x60>
 8005862:	2b03      	cmp	r3, #3
 8005864:	d015      	beq.n	8005892 <USBD_StdEPReq+0x8a>
 8005866:	e02b      	b.n	80058c0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <USBD_StdEPReq+0x80>
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d009      	beq.n	8005888 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f933 	bl	8006ae4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 f92f 	bl	8006ae4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005886:	e020      	b.n	80058ca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fc38 	bl	8006100 <USBD_CtlError>
        break;
 8005890:	e01b      	b.n	80058ca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	885b      	ldrh	r3, [r3, #2]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10e      	bne.n	80058b8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <USBD_StdEPReq+0xb0>
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d008      	beq.n	80058b8 <USBD_StdEPReq+0xb0>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	88db      	ldrh	r3, [r3, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 f916 	bl	8006ae4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fcec 	bl	8006296 <USBD_CtlSendStatus>

        break;
 80058be:	e004      	b.n	80058ca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fc1c 	bl	8006100 <USBD_CtlError>
        break;
 80058c8:	bf00      	nop
      }
      break;
 80058ca:	e0e7      	b.n	8005a9c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d002      	beq.n	80058dc <USBD_StdEPReq+0xd4>
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d015      	beq.n	8005906 <USBD_StdEPReq+0xfe>
 80058da:	e02d      	b.n	8005938 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <USBD_StdEPReq+0xf4>
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	d009      	beq.n	80058fc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 f8f9 	bl	8006ae4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 f8f5 	bl	8006ae4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80058fa:	e023      	b.n	8005944 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fbfe 	bl	8006100 <USBD_CtlError>
        break;
 8005904:	e01e      	b.n	8005944 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	885b      	ldrh	r3, [r3, #2]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d119      	bne.n	8005942 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f900 	bl	8006b22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fcb7 	bl	8006296 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
        }
        break;
 8005936:	e004      	b.n	8005942 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fbe0 	bl	8006100 <USBD_CtlError>
        break;
 8005940:	e000      	b.n	8005944 <USBD_StdEPReq+0x13c>
        break;
 8005942:	bf00      	nop
      }
      break;
 8005944:	e0aa      	b.n	8005a9c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594c:	2b02      	cmp	r3, #2
 800594e:	d002      	beq.n	8005956 <USBD_StdEPReq+0x14e>
 8005950:	2b03      	cmp	r3, #3
 8005952:	d032      	beq.n	80059ba <USBD_StdEPReq+0x1b2>
 8005954:	e097      	b.n	8005a86 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <USBD_StdEPReq+0x164>
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d004      	beq.n	800596c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fbcb 	bl	8006100 <USBD_CtlError>
          break;
 800596a:	e091      	b.n	8005a90 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800596c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005970:	2b00      	cmp	r3, #0
 8005972:	da0b      	bge.n	800598c <USBD_StdEPReq+0x184>
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	3310      	adds	r3, #16
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	e00b      	b.n	80059a4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2202      	movs	r2, #2
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fc15 	bl	80061e2 <USBD_CtlSendData>
        break;
 80059b8:	e06a      	b.n	8005a90 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80059ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da11      	bge.n	80059e6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3324      	adds	r3, #36	; 0x24
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d117      	bne.n	8005a0c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fb8e 	bl	8006100 <USBD_CtlError>
            break;
 80059e4:	e054      	b.n	8005a90 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb7b 	bl	8006100 <USBD_CtlError>
            break;
 8005a0a:	e041      	b.n	8005a90 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da0b      	bge.n	8005a2c <USBD_StdEPReq+0x224>
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	3310      	adds	r3, #16
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	e00b      	b.n	8005a44 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	3304      	adds	r3, #4
 8005a44:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <USBD_StdEPReq+0x24a>
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d103      	bne.n	8005a5a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e00e      	b.n	8005a78 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 f87e 	bl	8006b60 <USBD_LL_IsStallEP>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e002      	b.n	8005a78 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fbaf 	bl	80061e2 <USBD_CtlSendData>
          break;
 8005a84:	e004      	b.n	8005a90 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb39 	bl	8006100 <USBD_CtlError>
        break;
 8005a8e:	bf00      	nop
      }
      break;
 8005a90:	e004      	b.n	8005a9c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb33 	bl	8006100 <USBD_CtlError>
      break;
 8005a9a:	bf00      	nop
    }
    break;
 8005a9c:	e004      	b.n	8005aa8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb2d 	bl	8006100 <USBD_CtlError>
    break;
 8005aa6:	bf00      	nop
  }

  return ret;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	885b      	ldrh	r3, [r3, #2]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	f200 8128 	bhi.w	8005d2a <USBD_GetDescriptor+0x276>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <USBD_GetDescriptor+0x2c>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005d2b 	.word	0x08005d2b
 8005af0:	08005d2b 	.word	0x08005d2b
 8005af4:	08005ccb 	.word	0x08005ccb
 8005af8:	08005cf7 	.word	0x08005cf7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	7c12      	ldrb	r2, [r2, #16]
 8005b08:	f107 0108 	add.w	r1, r7, #8
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	60f8      	str	r0, [r7, #12]
    break;
 8005b12:	e112      	b.n	8005d3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	7c1b      	ldrb	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10d      	bne.n	8005b38 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	f107 0208 	add.w	r2, r7, #8
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005b36:	e100      	b.n	8005d3a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	f107 0208 	add.w	r2, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	2202      	movs	r2, #2
 8005b50:	701a      	strb	r2, [r3, #0]
    break;
 8005b52:	e0f2      	b.n	8005d3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	885b      	ldrh	r3, [r3, #2]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	f200 80ac 	bhi.w	8005cb8 <USBD_GetDescriptor+0x204>
 8005b60:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <USBD_GetDescriptor+0xb4>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b81 	.word	0x08005b81
 8005b6c:	08005bb5 	.word	0x08005bb5
 8005b70:	08005be9 	.word	0x08005be9
 8005b74:	08005c1d 	.word	0x08005c1d
 8005b78:	08005c51 	.word	0x08005c51
 8005b7c:	08005c85 	.word	0x08005c85
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	7c12      	ldrb	r2, [r2, #16]
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ba2:	e091      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 faaa 	bl	8006100 <USBD_CtlError>
        err++;
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	72fb      	strb	r3, [r7, #11]
      break;
 8005bb2:	e089      	b.n	8005cc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	7c12      	ldrb	r2, [r2, #16]
 8005bcc:	f107 0108 	add.w	r1, r7, #8
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bd6:	e077      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa90 	bl	8006100 <USBD_CtlError>
        err++;
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	3301      	adds	r3, #1
 8005be4:	72fb      	strb	r3, [r7, #11]
      break;
 8005be6:	e06f      	b.n	8005cc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	7c12      	ldrb	r2, [r2, #16]
 8005c00:	f107 0108 	add.w	r1, r7, #8
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
 8005c08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c0a:	e05d      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa76 	bl	8006100 <USBD_CtlError>
        err++;
 8005c14:	7afb      	ldrb	r3, [r7, #11]
 8005c16:	3301      	adds	r3, #1
 8005c18:	72fb      	strb	r3, [r7, #11]
      break;
 8005c1a:	e055      	b.n	8005cc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	7c12      	ldrb	r2, [r2, #16]
 8005c34:	f107 0108 	add.w	r1, r7, #8
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
 8005c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c3e:	e043      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa5c 	bl	8006100 <USBD_CtlError>
        err++;
 8005c48:	7afb      	ldrb	r3, [r7, #11]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8005c4e:	e03b      	b.n	8005cc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	7c12      	ldrb	r2, [r2, #16]
 8005c68:	f107 0108 	add.w	r1, r7, #8
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
 8005c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c72:	e029      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa42 	bl	8006100 <USBD_CtlError>
        err++;
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	72fb      	strb	r3, [r7, #11]
      break;
 8005c82:	e021      	b.n	8005cc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	7c12      	ldrb	r2, [r2, #16]
 8005c9c:	f107 0108 	add.w	r1, r7, #8
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ca6:	e00f      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa28 	bl	8006100 <USBD_CtlError>
        err++;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8005cb6:	e007      	b.n	8005cc8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa20 	bl	8006100 <USBD_CtlError>
      err++;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005cc6:	bf00      	nop
    }
    break;
 8005cc8:	e037      	b.n	8005d3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7c1b      	ldrb	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f107 0208 	add.w	r2, r7, #8
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4798      	blx	r3
 8005ce2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ce4:	e029      	b.n	8005d3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa09 	bl	8006100 <USBD_CtlError>
      err++;
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	72fb      	strb	r3, [r7, #11]
    break;
 8005cf4:	e021      	b.n	8005d3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7c1b      	ldrb	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f107 0208 	add.w	r2, r7, #8
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4798      	blx	r3
 8005d0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	2207      	movs	r2, #7
 8005d16:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005d18:	e00f      	b.n	8005d3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9ef 	bl	8006100 <USBD_CtlError>
      err++;
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	3301      	adds	r3, #1
 8005d26:	72fb      	strb	r3, [r7, #11]
    break;
 8005d28:	e007      	b.n	8005d3a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9e7 	bl	8006100 <USBD_CtlError>
    err++;
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	3301      	adds	r3, #1
 8005d36:	72fb      	strb	r3, [r7, #11]
    break;
 8005d38:	bf00      	nop
  }

  if (err != 0U)
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11e      	bne.n	8005d7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	88db      	ldrh	r3, [r3, #6]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d016      	beq.n	8005d76 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005d48:	893b      	ldrh	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	88da      	ldrh	r2, [r3, #6]
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	4293      	cmp	r3, r2
 8005d56:	bf28      	it	cs
 8005d58:	4613      	movcs	r3, r2
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d5e:	893b      	ldrh	r3, [r7, #8]
 8005d60:	461a      	mov	r2, r3
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa3c 	bl	80061e2 <USBD_CtlSendData>
 8005d6a:	e009      	b.n	8005d80 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9c6 	bl	8006100 <USBD_CtlError>
 8005d74:	e004      	b.n	8005d80 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa8d 	bl	8006296 <USBD_CtlSendStatus>
 8005d7c:	e000      	b.n	8005d80 <USBD_GetDescriptor+0x2cc>
    return;
 8005d7e:	bf00      	nop
    }
  }
}
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop

08005d88 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	889b      	ldrh	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d130      	bne.n	8005dfc <USBD_SetAddress+0x74>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	88db      	ldrh	r3, [r3, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d12c      	bne.n	8005dfc <USBD_SetAddress+0x74>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	885b      	ldrh	r3, [r3, #2]
 8005da6:	2b7f      	cmp	r3, #127	; 0x7f
 8005da8:	d828      	bhi.n	8005dfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	885b      	ldrh	r3, [r3, #2]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d104      	bne.n	8005dca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f99c 	bl	8006100 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc8:	e01c      	b.n	8005e04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7bfa      	ldrb	r2, [r7, #15]
 8005dce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 feee 	bl	8006bb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa5a 	bl	8006296 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df0:	e008      	b.n	8005e04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfa:	e003      	b.n	8005e04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f97e 	bl	8006100 <USBD_CtlError>
  }
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	885b      	ldrh	r3, [r3, #2]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e24:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d905      	bls.n	8005e38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f966 	bl	8006100 <USBD_CtlError>
    return USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e087      	b.n	8005f48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d002      	beq.n	8005e48 <USBD_SetConfig+0x3c>
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d025      	beq.n	8005e92 <USBD_SetConfig+0x86>
 8005e46:	e071      	b.n	8005f2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005e48:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01c      	beq.n	8005e8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005e50:	4b3f      	ldr	r3, [pc, #252]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e5a:	4b3d      	ldr	r3, [pc, #244]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff f9a7 	bl	80051b4 <USBD_SetClassConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f944 	bl	8006100 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e78:	e065      	b.n	8005f46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa0b 	bl	8006296 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2203      	movs	r2, #3
 8005e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e88:	e05d      	b.n	8005f46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa03 	bl	8006296 <USBD_CtlSendStatus>
    break;
 8005e90:	e059      	b.n	8005f46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <USBD_SetConfig+0x144>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d112      	bne.n	8005ec0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005ea2:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <USBD_SetConfig+0x144>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eac:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <USBD_SetConfig+0x144>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff f99a 	bl	80051ec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f9ec 	bl	8006296 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005ebe:	e042      	b.n	8005f46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005ec0:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <USBD_SetConfig+0x144>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d02a      	beq.n	8005f24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff f988 	bl	80051ec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <USBD_SetConfig+0x144>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <USBD_SetConfig+0x144>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff f961 	bl	80051b4 <USBD_SetClassConfig>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00f      	beq.n	8005f1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8fe 	bl	8006100 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff f96d 	bl	80051ec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005f1a:	e014      	b.n	8005f46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f9ba 	bl	8006296 <USBD_CtlSendStatus>
    break;
 8005f22:	e010      	b.n	8005f46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f9b6 	bl	8006296 <USBD_CtlSendStatus>
    break;
 8005f2a:	e00c      	b.n	8005f46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8e6 	bl	8006100 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <USBD_SetConfig+0x144>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff f956 	bl	80051ec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	73fb      	strb	r3, [r7, #15]
    break;
 8005f44:	bf00      	nop
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000020c 	.word	0x2000020c

08005f54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	88db      	ldrh	r3, [r3, #6]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d004      	beq.n	8005f70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8c9 	bl	8006100 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005f6e:	e021      	b.n	8005fb4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	db17      	blt.n	8005faa <USBD_GetConfig+0x56>
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dd02      	ble.n	8005f84 <USBD_GetConfig+0x30>
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d00b      	beq.n	8005f9a <USBD_GetConfig+0x46>
 8005f82:	e012      	b.n	8005faa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	2201      	movs	r2, #1
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f925 	bl	80061e2 <USBD_CtlSendData>
      break;
 8005f98:	e00c      	b.n	8005fb4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f91d 	bl	80061e2 <USBD_CtlSendData>
      break;
 8005fa8:	e004      	b.n	8005fb4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8a7 	bl	8006100 <USBD_CtlError>
      break;
 8005fb2:	bf00      	nop
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d81e      	bhi.n	8006010 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d004      	beq.n	8005fe4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f88f 	bl	8006100 <USBD_CtlError>
      break;
 8005fe2:	e01a      	b.n	800601a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f043 0202 	orr.w	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	330c      	adds	r3, #12
 8006004:	2202      	movs	r2, #2
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8ea 	bl	80061e2 <USBD_CtlSendData>
    break;
 800600e:	e004      	b.n	800601a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f874 	bl	8006100 <USBD_CtlError>
    break;
 8006018:	bf00      	nop
  }
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	885b      	ldrh	r3, [r3, #2]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d106      	bne.n	8006042 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f92a 	bl	8006296 <USBD_CtlSendStatus>
  }
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605a:	3b01      	subs	r3, #1
 800605c:	2b02      	cmp	r3, #2
 800605e:	d80b      	bhi.n	8006078 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10c      	bne.n	8006082 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f910 	bl	8006296 <USBD_CtlSendStatus>
      }
      break;
 8006076:	e004      	b.n	8006082 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f840 	bl	8006100 <USBD_CtlError>
      break;
 8006080:	e000      	b.n	8006084 <USBD_ClrFeature+0x3a>
      break;
 8006082:	bf00      	nop
  }
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fad3 	bl	8005662 <SWAPBYTE>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fac6 	bl	8005662 <SWAPBYTE>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fab9 	bl	8005662 <SWAPBYTE>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	80da      	strh	r2, [r3, #6]
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fce9 	bl	8006ae4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006112:	2100      	movs	r1, #0
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fce5 	bl	8006ae4 <USBD_LL_StallEP>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d036      	beq.n	80061a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f000 f836 	bl	80061ae <USBD_GetLen>
 8006142:	4603      	mov	r3, r0
 8006144:	3301      	adds	r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4413      	add	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
  idx++;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	3301      	adds	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4413      	add	r3, r2
 8006168:	2203      	movs	r2, #3
 800616a:	701a      	strb	r2, [r3, #0]
  idx++;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	3301      	adds	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006172:	e013      	b.n	800619c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3301      	adds	r3, #1
 8006184:	613b      	str	r3, [r7, #16]
    idx++;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	3301      	adds	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    idx++;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	3301      	adds	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e7      	bne.n	8006174 <USBD_GetString+0x52>
 80061a4:	e000      	b.n	80061a8 <USBD_GetString+0x86>
    return;
 80061a6:	bf00      	nop
  }
}
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80061be:	e005      	b.n	80061cc <USBD_GetLen+0x1e>
  {
    len++;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	3301      	adds	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f5      	bne.n	80061c0 <USBD_GetLen+0x12>
  }

  return len;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	2100      	movs	r1, #0
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fcf4 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fce3 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2203      	movs	r2, #3
 800624a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	2100      	movs	r1, #0
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fce7 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fcd6 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2204      	movs	r2, #4
 80062a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fca2 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2205      	movs	r2, #5
 80062c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062cc:	2300      	movs	r3, #0
 80062ce:	2200      	movs	r2, #0
 80062d0:	2100      	movs	r1, #0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fcb0 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062e8:	2200      	movs	r2, #0
 80062ea:	4912      	ldr	r1, [pc, #72]	; (8006334 <MX_USB_DEVICE_Init+0x50>)
 80062ec:	4812      	ldr	r0, [pc, #72]	; (8006338 <MX_USB_DEVICE_Init+0x54>)
 80062ee:	f7fe fef3 	bl	80050d8 <USBD_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062f8:	f7fa fa58 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062fc:	490f      	ldr	r1, [pc, #60]	; (800633c <MX_USB_DEVICE_Init+0x58>)
 80062fe:	480e      	ldr	r0, [pc, #56]	; (8006338 <MX_USB_DEVICE_Init+0x54>)
 8006300:	f7fe ff20 	bl	8005144 <USBD_RegisterClass>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800630a:	f7fa fa4f 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800630e:	490c      	ldr	r1, [pc, #48]	; (8006340 <MX_USB_DEVICE_Init+0x5c>)
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <MX_USB_DEVICE_Init+0x54>)
 8006312:	f7fe fe45 	bl	8004fa0 <USBD_CDC_RegisterInterface>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800631c:	f7fa fa46 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006320:	4805      	ldr	r0, [pc, #20]	; (8006338 <MX_USB_DEVICE_Init+0x54>)
 8006322:	f7fe ff30 	bl	8005186 <USBD_Start>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800632c:	f7fa fa3e 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006330:	bf00      	nop
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000138 	.word	0x20000138
 8006338:	200002e4 	.word	0x200002e4
 800633c:	20000018 	.word	0x20000018
 8006340:	2000011c 	.word	0x2000011c

08006344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006348:	2200      	movs	r2, #0
 800634a:	4905      	ldr	r1, [pc, #20]	; (8006360 <CDC_Init_FS+0x1c>)
 800634c:	4805      	ldr	r0, [pc, #20]	; (8006364 <CDC_Init_FS+0x20>)
 800634e:	f7fe fe3c 	bl	8004fca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006352:	4905      	ldr	r1, [pc, #20]	; (8006368 <CDC_Init_FS+0x24>)
 8006354:	4803      	ldr	r0, [pc, #12]	; (8006364 <CDC_Init_FS+0x20>)
 8006356:	f7fe fe51 	bl	8004ffc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800635a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	2000099c 	.word	0x2000099c
 8006364:	200002e4 	.word	0x200002e4
 8006368:	200005b4 	.word	0x200005b4

0800636c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	71fb      	strb	r3, [r7, #7]
 8006388:	4613      	mov	r3, r2
 800638a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b23      	cmp	r3, #35	; 0x23
 8006390:	d85c      	bhi.n	800644c <CDC_Control_FS+0xd0>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <CDC_Control_FS+0x1c>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	0800644d 	.word	0x0800644d
 800639c:	0800644d 	.word	0x0800644d
 80063a0:	0800644d 	.word	0x0800644d
 80063a4:	0800644d 	.word	0x0800644d
 80063a8:	0800644d 	.word	0x0800644d
 80063ac:	0800644d 	.word	0x0800644d
 80063b0:	0800644d 	.word	0x0800644d
 80063b4:	0800644d 	.word	0x0800644d
 80063b8:	0800644d 	.word	0x0800644d
 80063bc:	0800644d 	.word	0x0800644d
 80063c0:	0800644d 	.word	0x0800644d
 80063c4:	0800644d 	.word	0x0800644d
 80063c8:	0800644d 	.word	0x0800644d
 80063cc:	0800644d 	.word	0x0800644d
 80063d0:	0800644d 	.word	0x0800644d
 80063d4:	0800644d 	.word	0x0800644d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800644d 	.word	0x0800644d
 80063e0:	0800644d 	.word	0x0800644d
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	0800644d 	.word	0x0800644d
 80063ec:	0800644d 	.word	0x0800644d
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	0800644d 	.word	0x0800644d
 8006400:	0800644d 	.word	0x0800644d
 8006404:	0800644d 	.word	0x0800644d
 8006408:	0800644d 	.word	0x0800644d
 800640c:	0800644d 	.word	0x0800644d
 8006410:	0800644d 	.word	0x0800644d
 8006414:	0800644d 	.word	0x0800644d
 8006418:	08006429 	.word	0x08006429
 800641c:	0800643b 	.word	0x0800643b
 8006420:	0800644d 	.word	0x0800644d
 8006424:	0800644d 	.word	0x0800644d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
        = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <CDC_Control_FS+0xe0>)
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6810      	ldr	r0, [r2, #0]
 800642e:	6018      	str	r0, [r3, #0]
 8006430:	8891      	ldrh	r1, [r2, #4]
 8006432:	7992      	ldrb	r2, [r2, #6]
 8006434:	8099      	strh	r1, [r3, #4]
 8006436:	719a      	strb	r2, [r3, #6]
    break;
 8006438:	e009      	b.n	800644e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	4a07      	ldr	r2, [pc, #28]	; (800645c <CDC_Control_FS+0xe0>)
 800643e:	6810      	ldr	r0, [r2, #0]
 8006440:	6018      	str	r0, [r3, #0]
 8006442:	8891      	ldrh	r1, [r2, #4]
 8006444:	7992      	ldrb	r2, [r2, #6]
 8006446:	8099      	strh	r1, [r3, #4]
 8006448:	719a      	strb	r2, [r3, #6]
    break;
 800644a:	e000      	b.n	800644e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800644c:	bf00      	nop
  }

  return (USBD_OK);
 800644e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000130 	.word	0x20000130

08006460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4805      	ldr	r0, [pc, #20]	; (8006484 <CDC_Receive_FS+0x24>)
 800646e:	f7fe fdc5 	bl	8004ffc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006472:	4804      	ldr	r0, [pc, #16]	; (8006484 <CDC_Receive_FS+0x24>)
 8006474:	f7fe fe06 	bl	8005084 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006478:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200002e4 	.word	0x200002e4

08006488 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <CDC_Transmit_FS+0x48>)
 800649a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e00b      	b.n	80064c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80064ae:	887b      	ldrh	r3, [r7, #2]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4806      	ldr	r0, [pc, #24]	; (80064d0 <CDC_Transmit_FS+0x48>)
 80064b6:	f7fe fd88 	bl	8004fca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80064ba:	4805      	ldr	r0, [pc, #20]	; (80064d0 <CDC_Transmit_FS+0x48>)
 80064bc:	f7fe fdb2 	bl	8005024 <USBD_CDC_TransmitPacket>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200002e4 	.word	0x200002e4

080064d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80064e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2212      	movs	r2, #18
 8006508:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800650a:	4b03      	ldr	r3, [pc, #12]	; (8006518 <USBD_FS_DeviceDescriptor+0x20>)
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000154 	.word	0x20000154

0800651c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2204      	movs	r2, #4
 800652c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800652e:	4b03      	ldr	r3, [pc, #12]	; (800653c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000168 	.word	0x20000168

08006540 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4907      	ldr	r1, [pc, #28]	; (8006574 <USBD_FS_ProductStrDescriptor+0x34>)
 8006556:	4808      	ldr	r0, [pc, #32]	; (8006578 <USBD_FS_ProductStrDescriptor+0x38>)
 8006558:	f7ff fde3 	bl	8006122 <USBD_GetString>
 800655c:	e004      	b.n	8006568 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	4904      	ldr	r1, [pc, #16]	; (8006574 <USBD_FS_ProductStrDescriptor+0x34>)
 8006562:	4805      	ldr	r0, [pc, #20]	; (8006578 <USBD_FS_ProductStrDescriptor+0x38>)
 8006564:	f7ff fddd 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006568:	4b02      	ldr	r3, [pc, #8]	; (8006574 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000d84 	.word	0x20000d84
 8006578:	080075d0 	.word	0x080075d0

0800657c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	6039      	str	r1, [r7, #0]
 8006586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	4904      	ldr	r1, [pc, #16]	; (800659c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800658c:	4804      	ldr	r0, [pc, #16]	; (80065a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800658e:	f7ff fdc8 	bl	8006122 <USBD_GetString>
  return USBD_StrDesc;
 8006592:	4b02      	ldr	r3, [pc, #8]	; (800659c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000d84 	.word	0x20000d84
 80065a0:	080075e0 	.word	0x080075e0

080065a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	221a      	movs	r2, #26
 80065b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065b6:	f000 f843 	bl	8006640 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065ba:	4b02      	ldr	r3, [pc, #8]	; (80065c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	2000016c 	.word	0x2000016c

080065c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d105      	bne.n	80065e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	4907      	ldr	r1, [pc, #28]	; (80065fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80065de:	4808      	ldr	r0, [pc, #32]	; (8006600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065e0:	f7ff fd9f 	bl	8006122 <USBD_GetString>
 80065e4:	e004      	b.n	80065f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4904      	ldr	r1, [pc, #16]	; (80065fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80065ea:	4805      	ldr	r0, [pc, #20]	; (8006600 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065ec:	f7ff fd99 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065f0:	4b02      	ldr	r3, [pc, #8]	; (80065fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000d84 	.word	0x20000d84
 8006600:	080075f4 	.word	0x080075f4

08006604 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800661a:	4808      	ldr	r0, [pc, #32]	; (800663c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800661c:	f7ff fd81 	bl	8006122 <USBD_GetString>
 8006620:	e004      	b.n	800662c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4904      	ldr	r1, [pc, #16]	; (8006638 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006626:	4805      	ldr	r0, [pc, #20]	; (800663c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006628:	f7ff fd7b 	bl	8006122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000d84 	.word	0x20000d84
 800663c:	08007600 	.word	0x08007600

08006640 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <Get_SerialNum+0x44>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <Get_SerialNum+0x48>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006652:	4b0e      	ldr	r3, [pc, #56]	; (800668c <Get_SerialNum+0x4c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006666:	2208      	movs	r2, #8
 8006668:	4909      	ldr	r1, [pc, #36]	; (8006690 <Get_SerialNum+0x50>)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f814 	bl	8006698 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006670:	2204      	movs	r2, #4
 8006672:	4908      	ldr	r1, [pc, #32]	; (8006694 <Get_SerialNum+0x54>)
 8006674:	68b8      	ldr	r0, [r7, #8]
 8006676:	f000 f80f 	bl	8006698 <IntToUnicode>
  }
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	1fff7a10 	.word	0x1fff7a10
 8006688:	1fff7a14 	.word	0x1fff7a14
 800668c:	1fff7a18 	.word	0x1fff7a18
 8006690:	2000016e 	.word	0x2000016e
 8006694:	2000017e 	.word	0x2000017e

08006698 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
 80066ae:	e027      	b.n	8006700 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	0f1b      	lsrs	r3, r3, #28
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d80b      	bhi.n	80066d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0f1b      	lsrs	r3, r3, #28
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4619      	mov	r1, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	440b      	add	r3, r1
 80066c8:	3230      	adds	r2, #48	; 0x30
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e00a      	b.n	80066e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0f1b      	lsrs	r3, r3, #28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4619      	mov	r1, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	440b      	add	r3, r1
 80066e0:	3237      	adds	r2, #55	; 0x37
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	3301      	adds	r3, #1
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4413      	add	r3, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	3301      	adds	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
 8006700:	7dfa      	ldrb	r2, [r7, #23]
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	429a      	cmp	r2, r3
 8006706:	d3d3      	bcc.n	80066b0 <IntToUnicode+0x18>
  }
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	; 0x28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800671c:	f107 0314 	add.w	r3, r7, #20
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	609a      	str	r2, [r3, #8]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006734:	d13a      	bne.n	80067ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	6313      	str	r3, [r2, #48]	; 0x30
 8006746:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006752:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006758:	2302      	movs	r3, #2
 800675a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006760:	2303      	movs	r3, #3
 8006762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006764:	230a      	movs	r3, #10
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006768:	f107 0314 	add.w	r3, r7, #20
 800676c:	4619      	mov	r1, r3
 800676e:	4812      	ldr	r0, [pc, #72]	; (80067b8 <HAL_PCD_MspInit+0xa4>)
 8006770:	f7fa ff6c 	bl	800164c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 8006776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006778:	4a0e      	ldr	r2, [pc, #56]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	6353      	str	r3, [r2, #52]	; 0x34
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 8006786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006788:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 800678a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800678e:	6453      	str	r3, [r2, #68]	; 0x44
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_PCD_MspInit+0xa0>)
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	2043      	movs	r0, #67	; 0x43
 80067a2:	f7fa ff1c 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067a6:	2043      	movs	r0, #67	; 0x43
 80067a8:	f7fa ff35 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067ac:	bf00      	nop
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40020000 	.word	0x40020000

080067bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fd22 	bl	800521c <USBD_LL_SetupStage>
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	4619      	mov	r1, r3
 800680a:	f7fe fd5a 	bl	80052c2 <USBD_LL_DataOutStage>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3348      	adds	r3, #72	; 0x48
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	4619      	mov	r1, r3
 800683e:	f7fe fda3 	bl	8005388 <USBD_LL_DataInStage>
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fea7 	bl	80055ac <USBD_LL_SOF>
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800686e:	2301      	movs	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d001      	beq.n	800687e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800687a:	f7f9 ff97 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fe54 	bl	8005536 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fe0d 	bl	80054b4 <USBD_LL_Reset>
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fe4f 	bl	8005556 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <HAL_PCD_SuspendCallback+0x48>)
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	4a03      	ldr	r2, [pc, #12]	; (80068ec <HAL_PCD_SuspendCallback+0x48>)
 80068de:	f043 0306 	orr.w	r3, r3, #6
 80068e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed00 	.word	0xe000ed00

080068f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fe3e 	bl	8005580 <USBD_LL_Resume>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fe69 	bl	80055fa <USBD_LL_IsoOUTIncomplete>
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fe4a 	bl	80055e0 <USBD_LL_IsoINIncomplete>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fe56 	bl	8005614 <USBD_LL_DevConnected>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fe53 	bl	800562a <USBD_LL_DevDisconnected>
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d13c      	bne.n	8006a16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800699c:	4a20      	ldr	r2, [pc, #128]	; (8006a20 <USBD_LL_Init+0x94>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <USBD_LL_Init+0x94>)
 80069a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069ac:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <USBD_LL_Init+0x94>)
 80069b6:	2204      	movs	r2, #4
 80069b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <USBD_LL_Init+0x94>)
 80069bc:	2202      	movs	r2, #2
 80069be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <USBD_LL_Init+0x94>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <USBD_LL_Init+0x94>)
 80069c8:	2202      	movs	r2, #2
 80069ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069d2:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <USBD_LL_Init+0x94>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <USBD_LL_Init+0x94>)
 80069da:	2200      	movs	r2, #0
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <USBD_LL_Init+0x94>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <USBD_LL_Init+0x94>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80069ea:	480d      	ldr	r0, [pc, #52]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ec:	f7fa ffb0 	bl	8001950 <HAL_PCD_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80069f6:	f7f9 fed9 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	4808      	ldr	r0, [pc, #32]	; (8006a20 <USBD_LL_Init+0x94>)
 80069fe:	f7fc f90e 	bl	8002c1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	2100      	movs	r1, #0
 8006a06:	4806      	ldr	r0, [pc, #24]	; (8006a20 <USBD_LL_Init+0x94>)
 8006a08:	f7fc f8c2 	bl	8002b90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4803      	ldr	r0, [pc, #12]	; (8006a20 <USBD_LL_Init+0x94>)
 8006a12:	f7fc f8bd 	bl	8002b90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000f84 	.word	0x20000f84

08006a24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fb f8a5 	bl	8001b8a <HAL_PCD_Start>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f92a 	bl	8006ca0 <USBD_Get_USB_Status>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	461a      	mov	r2, r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	70fb      	strb	r3, [r7, #3]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70bb      	strb	r3, [r7, #2]
 8006a70:	4613      	mov	r3, r2
 8006a72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006a82:	78bb      	ldrb	r3, [r7, #2]
 8006a84:	883a      	ldrh	r2, [r7, #0]
 8006a86:	78f9      	ldrb	r1, [r7, #3]
 8006a88:	f7fb fc89 	bl	800239e <HAL_PCD_EP_Open>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f904 	bl	8006ca0 <USBD_Get_USB_Status>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fb fcd2 	bl	800246e <HAL_PCD_EP_Close>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f8e5 	bl	8006ca0 <USBD_Get_USB_Status>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fb fdaa 	bl	800265c <HAL_PCD_EP_SetStall>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f8c6 	bl	8006ca0 <USBD_Get_USB_Status>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fb fdef 	bl	8002724 <HAL_PCD_EP_ClrStall>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f8a7 	bl	8006ca0 <USBD_Get_USB_Status>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	da0b      	bge.n	8006b94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	333e      	adds	r3, #62	; 0x3e
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	e00b      	b.n	8006bac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006baa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fb fbbc 	bl	8002354 <HAL_PCD_SetAddress>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f85c 	bl	8006ca0 <USBD_Get_USB_Status>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	460b      	mov	r3, r1
 8006c04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c14:	7af9      	ldrb	r1, [r7, #11]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	f7fb fcd5 	bl	80025c8 <HAL_PCD_EP_Transmit>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f83b 	bl	8006ca0 <USBD_Get_USB_Status>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	460b      	mov	r3, r1
 8006c46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c56:	7af9      	ldrb	r1, [r7, #11]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	f7fb fc51 	bl	8002502 <HAL_PCD_EP_Receive>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f81a 	bl	8006ca0 <USBD_Get_USB_Status>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fb fc81 	bl	8002598 <HAL_PCD_EP_GetRxCount>
 8006c96:	4603      	mov	r3, r0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d817      	bhi.n	8006ce4 <USBD_Get_USB_Status+0x44>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USBD_Get_USB_Status+0x1c>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cd3 	.word	0x08006cd3
 8006cc4:	08006cd9 	.word	0x08006cd9
 8006cc8:	08006cdf 	.word	0x08006cdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd0:	e00b      	b.n	8006cea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd6:	e008      	b.n	8006cea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
    break;
 8006cdc:	e005      	b.n	8006cea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce2:	e002      	b.n	8006cea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce8:	bf00      	nop
  }
  return usb_status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <__errno>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <__errno+0x8>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000188 	.word	0x20000188

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0d      	ldr	r6, [pc, #52]	; (8006d3c <__libc_init_array+0x38>)
 8006d08:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0a:	1ba4      	subs	r4, r4, r6
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	2500      	movs	r5, #0
 8006d10:	42a5      	cmp	r5, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	4e0b      	ldr	r6, [pc, #44]	; (8006d44 <__libc_init_array+0x40>)
 8006d16:	4c0c      	ldr	r4, [pc, #48]	; (8006d48 <__libc_init_array+0x44>)
 8006d18:	f000 fc4a 	bl	80075b0 <_init>
 8006d1c:	1ba4      	subs	r4, r4, r6
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	2500      	movs	r5, #0
 8006d22:	42a5      	cmp	r5, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d2c:	4798      	blx	r3
 8006d2e:	3501      	adds	r5, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d36:	4798      	blx	r3
 8006d38:	3501      	adds	r5, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	0800765c 	.word	0x0800765c
 8006d40:	0800765c 	.word	0x0800765c
 8006d44:	0800765c 	.word	0x0800765c
 8006d48:	08007660 	.word	0x08007660

08006d4c <malloc>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <malloc+0xc>)
 8006d4e:	4601      	mov	r1, r0
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f000 b861 	b.w	8006e18 <_malloc_r>
 8006d56:	bf00      	nop
 8006d58:	20000188 	.word	0x20000188

08006d5c <free>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <free+0xc>)
 8006d5e:	4601      	mov	r1, r0
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f000 b80b 	b.w	8006d7c <_free_r>
 8006d66:	bf00      	nop
 8006d68:	20000188 	.word	0x20000188

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <_free_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4605      	mov	r5, r0
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d045      	beq.n	8006e10 <_free_r+0x94>
 8006d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d88:	1f0c      	subs	r4, r1, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bfb8      	it	lt
 8006d8e:	18e4      	addlt	r4, r4, r3
 8006d90:	f000 f8e0 	bl	8006f54 <__malloc_lock>
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <_free_r+0x98>)
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	4610      	mov	r0, r2
 8006d9a:	b933      	cbnz	r3, 8006daa <_free_r+0x2e>
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	6014      	str	r4, [r2, #0]
 8006da0:	4628      	mov	r0, r5
 8006da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da6:	f000 b8d6 	b.w	8006f56 <__malloc_unlock>
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	d90c      	bls.n	8006dc8 <_free_r+0x4c>
 8006dae:	6821      	ldr	r1, [r4, #0]
 8006db0:	1862      	adds	r2, r4, r1
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf04      	itt	eq
 8006db6:	681a      	ldreq	r2, [r3, #0]
 8006db8:	685b      	ldreq	r3, [r3, #4]
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	bf04      	itt	eq
 8006dbe:	1852      	addeq	r2, r2, r1
 8006dc0:	6022      	streq	r2, [r4, #0]
 8006dc2:	6004      	str	r4, [r0, #0]
 8006dc4:	e7ec      	b.n	8006da0 <_free_r+0x24>
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	b10a      	cbz	r2, 8006dd0 <_free_r+0x54>
 8006dcc:	42a2      	cmp	r2, r4
 8006dce:	d9fa      	bls.n	8006dc6 <_free_r+0x4a>
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	1858      	adds	r0, r3, r1
 8006dd4:	42a0      	cmp	r0, r4
 8006dd6:	d10b      	bne.n	8006df0 <_free_r+0x74>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	4401      	add	r1, r0
 8006ddc:	1858      	adds	r0, r3, r1
 8006dde:	4282      	cmp	r2, r0
 8006de0:	6019      	str	r1, [r3, #0]
 8006de2:	d1dd      	bne.n	8006da0 <_free_r+0x24>
 8006de4:	6810      	ldr	r0, [r2, #0]
 8006de6:	6852      	ldr	r2, [r2, #4]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	4401      	add	r1, r0
 8006dec:	6019      	str	r1, [r3, #0]
 8006dee:	e7d7      	b.n	8006da0 <_free_r+0x24>
 8006df0:	d902      	bls.n	8006df8 <_free_r+0x7c>
 8006df2:	230c      	movs	r3, #12
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	e7d3      	b.n	8006da0 <_free_r+0x24>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	1821      	adds	r1, r4, r0
 8006dfc:	428a      	cmp	r2, r1
 8006dfe:	bf04      	itt	eq
 8006e00:	6811      	ldreq	r1, [r2, #0]
 8006e02:	6852      	ldreq	r2, [r2, #4]
 8006e04:	6062      	str	r2, [r4, #4]
 8006e06:	bf04      	itt	eq
 8006e08:	1809      	addeq	r1, r1, r0
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	605c      	str	r4, [r3, #4]
 8006e0e:	e7c7      	b.n	8006da0 <_free_r+0x24>
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	20000210 	.word	0x20000210

08006e18 <_malloc_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	1ccd      	adds	r5, r1, #3
 8006e1c:	f025 0503 	bic.w	r5, r5, #3
 8006e20:	3508      	adds	r5, #8
 8006e22:	2d0c      	cmp	r5, #12
 8006e24:	bf38      	it	cc
 8006e26:	250c      	movcc	r5, #12
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	db01      	blt.n	8006e32 <_malloc_r+0x1a>
 8006e2e:	42a9      	cmp	r1, r5
 8006e30:	d903      	bls.n	8006e3a <_malloc_r+0x22>
 8006e32:	230c      	movs	r3, #12
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	2000      	movs	r0, #0
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	f000 f88b 	bl	8006f54 <__malloc_lock>
 8006e3e:	4a21      	ldr	r2, [pc, #132]	; (8006ec4 <_malloc_r+0xac>)
 8006e40:	6814      	ldr	r4, [r2, #0]
 8006e42:	4621      	mov	r1, r4
 8006e44:	b991      	cbnz	r1, 8006e6c <_malloc_r+0x54>
 8006e46:	4c20      	ldr	r4, [pc, #128]	; (8006ec8 <_malloc_r+0xb0>)
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	b91b      	cbnz	r3, 8006e54 <_malloc_r+0x3c>
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f000 f83d 	bl	8006ecc <_sbrk_r>
 8006e52:	6020      	str	r0, [r4, #0]
 8006e54:	4629      	mov	r1, r5
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f838 	bl	8006ecc <_sbrk_r>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d124      	bne.n	8006eaa <_malloc_r+0x92>
 8006e60:	230c      	movs	r3, #12
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 f876 	bl	8006f56 <__malloc_unlock>
 8006e6a:	e7e4      	b.n	8006e36 <_malloc_r+0x1e>
 8006e6c:	680b      	ldr	r3, [r1, #0]
 8006e6e:	1b5b      	subs	r3, r3, r5
 8006e70:	d418      	bmi.n	8006ea4 <_malloc_r+0x8c>
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d90f      	bls.n	8006e96 <_malloc_r+0x7e>
 8006e76:	600b      	str	r3, [r1, #0]
 8006e78:	50cd      	str	r5, [r1, r3]
 8006e7a:	18cc      	adds	r4, r1, r3
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f000 f86a 	bl	8006f56 <__malloc_unlock>
 8006e82:	f104 000b 	add.w	r0, r4, #11
 8006e86:	1d23      	adds	r3, r4, #4
 8006e88:	f020 0007 	bic.w	r0, r0, #7
 8006e8c:	1ac3      	subs	r3, r0, r3
 8006e8e:	d0d3      	beq.n	8006e38 <_malloc_r+0x20>
 8006e90:	425a      	negs	r2, r3
 8006e92:	50e2      	str	r2, [r4, r3]
 8006e94:	e7d0      	b.n	8006e38 <_malloc_r+0x20>
 8006e96:	428c      	cmp	r4, r1
 8006e98:	684b      	ldr	r3, [r1, #4]
 8006e9a:	bf16      	itet	ne
 8006e9c:	6063      	strne	r3, [r4, #4]
 8006e9e:	6013      	streq	r3, [r2, #0]
 8006ea0:	460c      	movne	r4, r1
 8006ea2:	e7eb      	b.n	8006e7c <_malloc_r+0x64>
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	6849      	ldr	r1, [r1, #4]
 8006ea8:	e7cc      	b.n	8006e44 <_malloc_r+0x2c>
 8006eaa:	1cc4      	adds	r4, r0, #3
 8006eac:	f024 0403 	bic.w	r4, r4, #3
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d005      	beq.n	8006ec0 <_malloc_r+0xa8>
 8006eb4:	1a21      	subs	r1, r4, r0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 f808 	bl	8006ecc <_sbrk_r>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d0cf      	beq.n	8006e60 <_malloc_r+0x48>
 8006ec0:	6025      	str	r5, [r4, #0]
 8006ec2:	e7db      	b.n	8006e7c <_malloc_r+0x64>
 8006ec4:	20000210 	.word	0x20000210
 8006ec8:	20000214 	.word	0x20000214

08006ecc <_sbrk_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4c06      	ldr	r4, [pc, #24]	; (8006ee8 <_sbrk_r+0x1c>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	f7f9 fd1e 	bl	8000918 <_sbrk>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_sbrk_r+0x1a>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_sbrk_r+0x1a>
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	2000138c 	.word	0x2000138c

08006eec <sniprintf>:
 8006eec:	b40c      	push	{r2, r3}
 8006eee:	b530      	push	{r4, r5, lr}
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <sniprintf+0x64>)
 8006ef2:	1e0c      	subs	r4, r1, #0
 8006ef4:	b09d      	sub	sp, #116	; 0x74
 8006ef6:	681d      	ldr	r5, [r3, #0]
 8006ef8:	da08      	bge.n	8006f0c <sniprintf+0x20>
 8006efa:	238b      	movs	r3, #139	; 0x8b
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295
 8006f02:	b01d      	add	sp, #116	; 0x74
 8006f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f08:	b002      	add	sp, #8
 8006f0a:	4770      	bx	lr
 8006f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f14:	bf14      	ite	ne
 8006f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f1a:	4623      	moveq	r3, r4
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	9307      	str	r3, [sp, #28]
 8006f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	9006      	str	r0, [sp, #24]
 8006f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f2e:	ab21      	add	r3, sp, #132	; 0x84
 8006f30:	a902      	add	r1, sp, #8
 8006f32:	4628      	mov	r0, r5
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	f000 f869 	bl	800700c <_svfiprintf_r>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	bfbc      	itt	lt
 8006f3e:	238b      	movlt	r3, #139	; 0x8b
 8006f40:	602b      	strlt	r3, [r5, #0]
 8006f42:	2c00      	cmp	r4, #0
 8006f44:	d0dd      	beq.n	8006f02 <sniprintf+0x16>
 8006f46:	9b02      	ldr	r3, [sp, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e7d9      	b.n	8006f02 <sniprintf+0x16>
 8006f4e:	bf00      	nop
 8006f50:	20000188 	.word	0x20000188

08006f54 <__malloc_lock>:
 8006f54:	4770      	bx	lr

08006f56 <__malloc_unlock>:
 8006f56:	4770      	bx	lr

08006f58 <__ssputs_r>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	688e      	ldr	r6, [r1, #8]
 8006f5e:	429e      	cmp	r6, r3
 8006f60:	4682      	mov	sl, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	4690      	mov	r8, r2
 8006f66:	4699      	mov	r9, r3
 8006f68:	d837      	bhi.n	8006fda <__ssputs_r+0x82>
 8006f6a:	898a      	ldrh	r2, [r1, #12]
 8006f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f70:	d031      	beq.n	8006fd6 <__ssputs_r+0x7e>
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	6909      	ldr	r1, [r1, #16]
 8006f76:	1a6f      	subs	r7, r5, r1
 8006f78:	6965      	ldr	r5, [r4, #20]
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f80:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f84:	f109 0301 	add.w	r3, r9, #1
 8006f88:	443b      	add	r3, r7
 8006f8a:	429d      	cmp	r5, r3
 8006f8c:	bf38      	it	cc
 8006f8e:	461d      	movcc	r5, r3
 8006f90:	0553      	lsls	r3, r2, #21
 8006f92:	d530      	bpl.n	8006ff6 <__ssputs_r+0x9e>
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7ff ff3f 	bl	8006e18 <_malloc_r>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	b950      	cbnz	r0, 8006fb4 <__ssputs_r+0x5c>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	f8ca 3000 	str.w	r3, [sl]
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	6921      	ldr	r1, [r4, #16]
 8006fb8:	f000 faa8 	bl	800750c <memcpy>
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	6126      	str	r6, [r4, #16]
 8006fca:	6165      	str	r5, [r4, #20]
 8006fcc:	443e      	add	r6, r7
 8006fce:	1bed      	subs	r5, r5, r7
 8006fd0:	6026      	str	r6, [r4, #0]
 8006fd2:	60a5      	str	r5, [r4, #8]
 8006fd4:	464e      	mov	r6, r9
 8006fd6:	454e      	cmp	r6, r9
 8006fd8:	d900      	bls.n	8006fdc <__ssputs_r+0x84>
 8006fda:	464e      	mov	r6, r9
 8006fdc:	4632      	mov	r2, r6
 8006fde:	4641      	mov	r1, r8
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	f000 fa9e 	bl	8007522 <memmove>
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	1b9b      	subs	r3, r3, r6
 8006fea:	60a3      	str	r3, [r4, #8]
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	441e      	add	r6, r3
 8006ff0:	6026      	str	r6, [r4, #0]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7dc      	b.n	8006fb0 <__ssputs_r+0x58>
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	f000 faac 	bl	8007554 <_realloc_r>
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d1e2      	bne.n	8006fc8 <__ssputs_r+0x70>
 8007002:	6921      	ldr	r1, [r4, #16]
 8007004:	4650      	mov	r0, sl
 8007006:	f7ff feb9 	bl	8006d7c <_free_r>
 800700a:	e7c8      	b.n	8006f9e <__ssputs_r+0x46>

0800700c <_svfiprintf_r>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	461d      	mov	r5, r3
 8007012:	898b      	ldrh	r3, [r1, #12]
 8007014:	061f      	lsls	r7, r3, #24
 8007016:	b09d      	sub	sp, #116	; 0x74
 8007018:	4680      	mov	r8, r0
 800701a:	460c      	mov	r4, r1
 800701c:	4616      	mov	r6, r2
 800701e:	d50f      	bpl.n	8007040 <_svfiprintf_r+0x34>
 8007020:	690b      	ldr	r3, [r1, #16]
 8007022:	b96b      	cbnz	r3, 8007040 <_svfiprintf_r+0x34>
 8007024:	2140      	movs	r1, #64	; 0x40
 8007026:	f7ff fef7 	bl	8006e18 <_malloc_r>
 800702a:	6020      	str	r0, [r4, #0]
 800702c:	6120      	str	r0, [r4, #16]
 800702e:	b928      	cbnz	r0, 800703c <_svfiprintf_r+0x30>
 8007030:	230c      	movs	r3, #12
 8007032:	f8c8 3000 	str.w	r3, [r8]
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	e0c8      	b.n	80071ce <_svfiprintf_r+0x1c2>
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	2300      	movs	r3, #0
 8007042:	9309      	str	r3, [sp, #36]	; 0x24
 8007044:	2320      	movs	r3, #32
 8007046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800704a:	2330      	movs	r3, #48	; 0x30
 800704c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007050:	9503      	str	r5, [sp, #12]
 8007052:	f04f 0b01 	mov.w	fp, #1
 8007056:	4637      	mov	r7, r6
 8007058:	463d      	mov	r5, r7
 800705a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800705e:	b10b      	cbz	r3, 8007064 <_svfiprintf_r+0x58>
 8007060:	2b25      	cmp	r3, #37	; 0x25
 8007062:	d13e      	bne.n	80070e2 <_svfiprintf_r+0xd6>
 8007064:	ebb7 0a06 	subs.w	sl, r7, r6
 8007068:	d00b      	beq.n	8007082 <_svfiprintf_r+0x76>
 800706a:	4653      	mov	r3, sl
 800706c:	4632      	mov	r2, r6
 800706e:	4621      	mov	r1, r4
 8007070:	4640      	mov	r0, r8
 8007072:	f7ff ff71 	bl	8006f58 <__ssputs_r>
 8007076:	3001      	adds	r0, #1
 8007078:	f000 80a4 	beq.w	80071c4 <_svfiprintf_r+0x1b8>
 800707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707e:	4453      	add	r3, sl
 8007080:	9309      	str	r3, [sp, #36]	; 0x24
 8007082:	783b      	ldrb	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 809d 	beq.w	80071c4 <_svfiprintf_r+0x1b8>
 800708a:	2300      	movs	r3, #0
 800708c:	f04f 32ff 	mov.w	r2, #4294967295
 8007090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709c:	931a      	str	r3, [sp, #104]	; 0x68
 800709e:	462f      	mov	r7, r5
 80070a0:	2205      	movs	r2, #5
 80070a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070a6:	4850      	ldr	r0, [pc, #320]	; (80071e8 <_svfiprintf_r+0x1dc>)
 80070a8:	f7f9 f89a 	bl	80001e0 <memchr>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	b9d0      	cbnz	r0, 80070e6 <_svfiprintf_r+0xda>
 80070b0:	06d9      	lsls	r1, r3, #27
 80070b2:	bf44      	itt	mi
 80070b4:	2220      	movmi	r2, #32
 80070b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070ba:	071a      	lsls	r2, r3, #28
 80070bc:	bf44      	itt	mi
 80070be:	222b      	movmi	r2, #43	; 0x2b
 80070c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070c4:	782a      	ldrb	r2, [r5, #0]
 80070c6:	2a2a      	cmp	r2, #42	; 0x2a
 80070c8:	d015      	beq.n	80070f6 <_svfiprintf_r+0xea>
 80070ca:	9a07      	ldr	r2, [sp, #28]
 80070cc:	462f      	mov	r7, r5
 80070ce:	2000      	movs	r0, #0
 80070d0:	250a      	movs	r5, #10
 80070d2:	4639      	mov	r1, r7
 80070d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d8:	3b30      	subs	r3, #48	; 0x30
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d94d      	bls.n	800717a <_svfiprintf_r+0x16e>
 80070de:	b1b8      	cbz	r0, 8007110 <_svfiprintf_r+0x104>
 80070e0:	e00f      	b.n	8007102 <_svfiprintf_r+0xf6>
 80070e2:	462f      	mov	r7, r5
 80070e4:	e7b8      	b.n	8007058 <_svfiprintf_r+0x4c>
 80070e6:	4a40      	ldr	r2, [pc, #256]	; (80071e8 <_svfiprintf_r+0x1dc>)
 80070e8:	1a80      	subs	r0, r0, r2
 80070ea:	fa0b f000 	lsl.w	r0, fp, r0
 80070ee:	4318      	orrs	r0, r3
 80070f0:	9004      	str	r0, [sp, #16]
 80070f2:	463d      	mov	r5, r7
 80070f4:	e7d3      	b.n	800709e <_svfiprintf_r+0x92>
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	1d11      	adds	r1, r2, #4
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	9103      	str	r1, [sp, #12]
 80070fe:	2a00      	cmp	r2, #0
 8007100:	db01      	blt.n	8007106 <_svfiprintf_r+0xfa>
 8007102:	9207      	str	r2, [sp, #28]
 8007104:	e004      	b.n	8007110 <_svfiprintf_r+0x104>
 8007106:	4252      	negs	r2, r2
 8007108:	f043 0302 	orr.w	r3, r3, #2
 800710c:	9207      	str	r2, [sp, #28]
 800710e:	9304      	str	r3, [sp, #16]
 8007110:	783b      	ldrb	r3, [r7, #0]
 8007112:	2b2e      	cmp	r3, #46	; 0x2e
 8007114:	d10c      	bne.n	8007130 <_svfiprintf_r+0x124>
 8007116:	787b      	ldrb	r3, [r7, #1]
 8007118:	2b2a      	cmp	r3, #42	; 0x2a
 800711a:	d133      	bne.n	8007184 <_svfiprintf_r+0x178>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	1d1a      	adds	r2, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	9203      	str	r2, [sp, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfb8      	it	lt
 8007128:	f04f 33ff 	movlt.w	r3, #4294967295
 800712c:	3702      	adds	r7, #2
 800712e:	9305      	str	r3, [sp, #20]
 8007130:	4d2e      	ldr	r5, [pc, #184]	; (80071ec <_svfiprintf_r+0x1e0>)
 8007132:	7839      	ldrb	r1, [r7, #0]
 8007134:	2203      	movs	r2, #3
 8007136:	4628      	mov	r0, r5
 8007138:	f7f9 f852 	bl	80001e0 <memchr>
 800713c:	b138      	cbz	r0, 800714e <_svfiprintf_r+0x142>
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	1b40      	subs	r0, r0, r5
 8007142:	fa03 f000 	lsl.w	r0, r3, r0
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	4303      	orrs	r3, r0
 800714a:	3701      	adds	r7, #1
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	7839      	ldrb	r1, [r7, #0]
 8007150:	4827      	ldr	r0, [pc, #156]	; (80071f0 <_svfiprintf_r+0x1e4>)
 8007152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007156:	2206      	movs	r2, #6
 8007158:	1c7e      	adds	r6, r7, #1
 800715a:	f7f9 f841 	bl	80001e0 <memchr>
 800715e:	2800      	cmp	r0, #0
 8007160:	d038      	beq.n	80071d4 <_svfiprintf_r+0x1c8>
 8007162:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <_svfiprintf_r+0x1e8>)
 8007164:	bb13      	cbnz	r3, 80071ac <_svfiprintf_r+0x1a0>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	3307      	adds	r3, #7
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	3308      	adds	r3, #8
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007174:	444b      	add	r3, r9
 8007176:	9309      	str	r3, [sp, #36]	; 0x24
 8007178:	e76d      	b.n	8007056 <_svfiprintf_r+0x4a>
 800717a:	fb05 3202 	mla	r2, r5, r2, r3
 800717e:	2001      	movs	r0, #1
 8007180:	460f      	mov	r7, r1
 8007182:	e7a6      	b.n	80070d2 <_svfiprintf_r+0xc6>
 8007184:	2300      	movs	r3, #0
 8007186:	3701      	adds	r7, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	4619      	mov	r1, r3
 800718c:	250a      	movs	r5, #10
 800718e:	4638      	mov	r0, r7
 8007190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007194:	3a30      	subs	r2, #48	; 0x30
 8007196:	2a09      	cmp	r2, #9
 8007198:	d903      	bls.n	80071a2 <_svfiprintf_r+0x196>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0c8      	beq.n	8007130 <_svfiprintf_r+0x124>
 800719e:	9105      	str	r1, [sp, #20]
 80071a0:	e7c6      	b.n	8007130 <_svfiprintf_r+0x124>
 80071a2:	fb05 2101 	mla	r1, r5, r1, r2
 80071a6:	2301      	movs	r3, #1
 80071a8:	4607      	mov	r7, r0
 80071aa:	e7f0      	b.n	800718e <_svfiprintf_r+0x182>
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4622      	mov	r2, r4
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <_svfiprintf_r+0x1ec>)
 80071b4:	a904      	add	r1, sp, #16
 80071b6:	4640      	mov	r0, r8
 80071b8:	f3af 8000 	nop.w
 80071bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071c0:	4681      	mov	r9, r0
 80071c2:	d1d6      	bne.n	8007172 <_svfiprintf_r+0x166>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	065b      	lsls	r3, r3, #25
 80071c8:	f53f af35 	bmi.w	8007036 <_svfiprintf_r+0x2a>
 80071cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ce:	b01d      	add	sp, #116	; 0x74
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	ab03      	add	r3, sp, #12
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4622      	mov	r2, r4
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <_svfiprintf_r+0x1ec>)
 80071dc:	a904      	add	r1, sp, #16
 80071de:	4640      	mov	r0, r8
 80071e0:	f000 f882 	bl	80072e8 <_printf_i>
 80071e4:	e7ea      	b.n	80071bc <_svfiprintf_r+0x1b0>
 80071e6:	bf00      	nop
 80071e8:	08007620 	.word	0x08007620
 80071ec:	08007626 	.word	0x08007626
 80071f0:	0800762a 	.word	0x0800762a
 80071f4:	00000000 	.word	0x00000000
 80071f8:	08006f59 	.word	0x08006f59

080071fc <_printf_common>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	4691      	mov	r9, r2
 8007202:	461f      	mov	r7, r3
 8007204:	688a      	ldr	r2, [r1, #8]
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800720c:	4293      	cmp	r3, r2
 800720e:	bfb8      	it	lt
 8007210:	4613      	movlt	r3, r2
 8007212:	f8c9 3000 	str.w	r3, [r9]
 8007216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800721a:	4606      	mov	r6, r0
 800721c:	460c      	mov	r4, r1
 800721e:	b112      	cbz	r2, 8007226 <_printf_common+0x2a>
 8007220:	3301      	adds	r3, #1
 8007222:	f8c9 3000 	str.w	r3, [r9]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	0699      	lsls	r1, r3, #26
 800722a:	bf42      	ittt	mi
 800722c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007230:	3302      	addmi	r3, #2
 8007232:	f8c9 3000 	strmi.w	r3, [r9]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d107      	bne.n	800724e <_printf_common+0x52>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	f8d9 2000 	ldr.w	r2, [r9]
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	42ab      	cmp	r3, r5
 800724c:	dc28      	bgt.n	80072a0 <_printf_common+0xa4>
 800724e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	3300      	adds	r3, #0
 8007256:	bf18      	it	ne
 8007258:	2301      	movne	r3, #1
 800725a:	0692      	lsls	r2, r2, #26
 800725c:	d42d      	bmi.n	80072ba <_printf_common+0xbe>
 800725e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007262:	4639      	mov	r1, r7
 8007264:	4630      	mov	r0, r6
 8007266:	47c0      	blx	r8
 8007268:	3001      	adds	r0, #1
 800726a:	d020      	beq.n	80072ae <_printf_common+0xb2>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	68e5      	ldr	r5, [r4, #12]
 8007270:	f8d9 2000 	ldr.w	r2, [r9]
 8007274:	f003 0306 	and.w	r3, r3, #6
 8007278:	2b04      	cmp	r3, #4
 800727a:	bf08      	it	eq
 800727c:	1aad      	subeq	r5, r5, r2
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	6922      	ldr	r2, [r4, #16]
 8007282:	bf0c      	ite	eq
 8007284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007288:	2500      	movne	r5, #0
 800728a:	4293      	cmp	r3, r2
 800728c:	bfc4      	itt	gt
 800728e:	1a9b      	subgt	r3, r3, r2
 8007290:	18ed      	addgt	r5, r5, r3
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	341a      	adds	r4, #26
 8007298:	454d      	cmp	r5, r9
 800729a:	d11a      	bne.n	80072d2 <_printf_common+0xd6>
 800729c:	2000      	movs	r0, #0
 800729e:	e008      	b.n	80072b2 <_printf_common+0xb6>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4652      	mov	r2, sl
 80072a4:	4639      	mov	r1, r7
 80072a6:	4630      	mov	r0, r6
 80072a8:	47c0      	blx	r8
 80072aa:	3001      	adds	r0, #1
 80072ac:	d103      	bne.n	80072b6 <_printf_common+0xba>
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b6:	3501      	adds	r5, #1
 80072b8:	e7c3      	b.n	8007242 <_printf_common+0x46>
 80072ba:	18e1      	adds	r1, r4, r3
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	2030      	movs	r0, #48	; 0x30
 80072c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072c4:	4422      	add	r2, r4
 80072c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ce:	3302      	adds	r3, #2
 80072d0:	e7c5      	b.n	800725e <_printf_common+0x62>
 80072d2:	2301      	movs	r3, #1
 80072d4:	4622      	mov	r2, r4
 80072d6:	4639      	mov	r1, r7
 80072d8:	4630      	mov	r0, r6
 80072da:	47c0      	blx	r8
 80072dc:	3001      	adds	r0, #1
 80072de:	d0e6      	beq.n	80072ae <_printf_common+0xb2>
 80072e0:	f109 0901 	add.w	r9, r9, #1
 80072e4:	e7d8      	b.n	8007298 <_printf_common+0x9c>
	...

080072e8 <_printf_i>:
 80072e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80072f0:	460c      	mov	r4, r1
 80072f2:	7e09      	ldrb	r1, [r1, #24]
 80072f4:	b085      	sub	sp, #20
 80072f6:	296e      	cmp	r1, #110	; 0x6e
 80072f8:	4617      	mov	r7, r2
 80072fa:	4606      	mov	r6, r0
 80072fc:	4698      	mov	r8, r3
 80072fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007300:	f000 80b3 	beq.w	800746a <_printf_i+0x182>
 8007304:	d822      	bhi.n	800734c <_printf_i+0x64>
 8007306:	2963      	cmp	r1, #99	; 0x63
 8007308:	d036      	beq.n	8007378 <_printf_i+0x90>
 800730a:	d80a      	bhi.n	8007322 <_printf_i+0x3a>
 800730c:	2900      	cmp	r1, #0
 800730e:	f000 80b9 	beq.w	8007484 <_printf_i+0x19c>
 8007312:	2958      	cmp	r1, #88	; 0x58
 8007314:	f000 8083 	beq.w	800741e <_printf_i+0x136>
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007320:	e032      	b.n	8007388 <_printf_i+0xa0>
 8007322:	2964      	cmp	r1, #100	; 0x64
 8007324:	d001      	beq.n	800732a <_printf_i+0x42>
 8007326:	2969      	cmp	r1, #105	; 0x69
 8007328:	d1f6      	bne.n	8007318 <_printf_i+0x30>
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	0605      	lsls	r5, r0, #24
 8007330:	f103 0104 	add.w	r1, r3, #4
 8007334:	d52a      	bpl.n	800738c <_printf_i+0xa4>
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da03      	bge.n	8007346 <_printf_i+0x5e>
 800733e:	222d      	movs	r2, #45	; 0x2d
 8007340:	425b      	negs	r3, r3
 8007342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007346:	486f      	ldr	r0, [pc, #444]	; (8007504 <_printf_i+0x21c>)
 8007348:	220a      	movs	r2, #10
 800734a:	e039      	b.n	80073c0 <_printf_i+0xd8>
 800734c:	2973      	cmp	r1, #115	; 0x73
 800734e:	f000 809d 	beq.w	800748c <_printf_i+0x1a4>
 8007352:	d808      	bhi.n	8007366 <_printf_i+0x7e>
 8007354:	296f      	cmp	r1, #111	; 0x6f
 8007356:	d020      	beq.n	800739a <_printf_i+0xb2>
 8007358:	2970      	cmp	r1, #112	; 0x70
 800735a:	d1dd      	bne.n	8007318 <_printf_i+0x30>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	f043 0320 	orr.w	r3, r3, #32
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	e003      	b.n	800736e <_printf_i+0x86>
 8007366:	2975      	cmp	r1, #117	; 0x75
 8007368:	d017      	beq.n	800739a <_printf_i+0xb2>
 800736a:	2978      	cmp	r1, #120	; 0x78
 800736c:	d1d4      	bne.n	8007318 <_printf_i+0x30>
 800736e:	2378      	movs	r3, #120	; 0x78
 8007370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007374:	4864      	ldr	r0, [pc, #400]	; (8007508 <_printf_i+0x220>)
 8007376:	e055      	b.n	8007424 <_printf_i+0x13c>
 8007378:	6813      	ldr	r3, [r2, #0]
 800737a:	1d19      	adds	r1, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6011      	str	r1, [r2, #0]
 8007380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007388:	2301      	movs	r3, #1
 800738a:	e08c      	b.n	80074a6 <_printf_i+0x1be>
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6011      	str	r1, [r2, #0]
 8007390:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007394:	bf18      	it	ne
 8007396:	b21b      	sxthne	r3, r3
 8007398:	e7cf      	b.n	800733a <_printf_i+0x52>
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	6825      	ldr	r5, [r4, #0]
 800739e:	1d18      	adds	r0, r3, #4
 80073a0:	6010      	str	r0, [r2, #0]
 80073a2:	0628      	lsls	r0, r5, #24
 80073a4:	d501      	bpl.n	80073aa <_printf_i+0xc2>
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	e002      	b.n	80073b0 <_printf_i+0xc8>
 80073aa:	0668      	lsls	r0, r5, #25
 80073ac:	d5fb      	bpl.n	80073a6 <_printf_i+0xbe>
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	4854      	ldr	r0, [pc, #336]	; (8007504 <_printf_i+0x21c>)
 80073b2:	296f      	cmp	r1, #111	; 0x6f
 80073b4:	bf14      	ite	ne
 80073b6:	220a      	movne	r2, #10
 80073b8:	2208      	moveq	r2, #8
 80073ba:	2100      	movs	r1, #0
 80073bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073c0:	6865      	ldr	r5, [r4, #4]
 80073c2:	60a5      	str	r5, [r4, #8]
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	f2c0 8095 	blt.w	80074f4 <_printf_i+0x20c>
 80073ca:	6821      	ldr	r1, [r4, #0]
 80073cc:	f021 0104 	bic.w	r1, r1, #4
 80073d0:	6021      	str	r1, [r4, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d13d      	bne.n	8007452 <_printf_i+0x16a>
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	f040 808e 	bne.w	80074f8 <_printf_i+0x210>
 80073dc:	4665      	mov	r5, ip
 80073de:	2a08      	cmp	r2, #8
 80073e0:	d10b      	bne.n	80073fa <_printf_i+0x112>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	07db      	lsls	r3, r3, #31
 80073e6:	d508      	bpl.n	80073fa <_printf_i+0x112>
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	6862      	ldr	r2, [r4, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	bfde      	ittt	le
 80073f0:	2330      	movle	r3, #48	; 0x30
 80073f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073fa:	ebac 0305 	sub.w	r3, ip, r5
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	f8cd 8000 	str.w	r8, [sp]
 8007404:	463b      	mov	r3, r7
 8007406:	aa03      	add	r2, sp, #12
 8007408:	4621      	mov	r1, r4
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff fef6 	bl	80071fc <_printf_common>
 8007410:	3001      	adds	r0, #1
 8007412:	d14d      	bne.n	80074b0 <_printf_i+0x1c8>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	b005      	add	sp, #20
 800741a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741e:	4839      	ldr	r0, [pc, #228]	; (8007504 <_printf_i+0x21c>)
 8007420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	1d1d      	adds	r5, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6015      	str	r5, [r2, #0]
 800742e:	060a      	lsls	r2, r1, #24
 8007430:	d50b      	bpl.n	800744a <_printf_i+0x162>
 8007432:	07ca      	lsls	r2, r1, #31
 8007434:	bf44      	itt	mi
 8007436:	f041 0120 	orrmi.w	r1, r1, #32
 800743a:	6021      	strmi	r1, [r4, #0]
 800743c:	b91b      	cbnz	r3, 8007446 <_printf_i+0x15e>
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	f022 0220 	bic.w	r2, r2, #32
 8007444:	6022      	str	r2, [r4, #0]
 8007446:	2210      	movs	r2, #16
 8007448:	e7b7      	b.n	80073ba <_printf_i+0xd2>
 800744a:	064d      	lsls	r5, r1, #25
 800744c:	bf48      	it	mi
 800744e:	b29b      	uxthmi	r3, r3
 8007450:	e7ef      	b.n	8007432 <_printf_i+0x14a>
 8007452:	4665      	mov	r5, ip
 8007454:	fbb3 f1f2 	udiv	r1, r3, r2
 8007458:	fb02 3311 	mls	r3, r2, r1, r3
 800745c:	5cc3      	ldrb	r3, [r0, r3]
 800745e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007462:	460b      	mov	r3, r1
 8007464:	2900      	cmp	r1, #0
 8007466:	d1f5      	bne.n	8007454 <_printf_i+0x16c>
 8007468:	e7b9      	b.n	80073de <_printf_i+0xf6>
 800746a:	6813      	ldr	r3, [r2, #0]
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	6961      	ldr	r1, [r4, #20]
 8007470:	1d18      	adds	r0, r3, #4
 8007472:	6010      	str	r0, [r2, #0]
 8007474:	0628      	lsls	r0, r5, #24
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	d501      	bpl.n	800747e <_printf_i+0x196>
 800747a:	6019      	str	r1, [r3, #0]
 800747c:	e002      	b.n	8007484 <_printf_i+0x19c>
 800747e:	066a      	lsls	r2, r5, #25
 8007480:	d5fb      	bpl.n	800747a <_printf_i+0x192>
 8007482:	8019      	strh	r1, [r3, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	4665      	mov	r5, ip
 800748a:	e7b9      	b.n	8007400 <_printf_i+0x118>
 800748c:	6813      	ldr	r3, [r2, #0]
 800748e:	1d19      	adds	r1, r3, #4
 8007490:	6011      	str	r1, [r2, #0]
 8007492:	681d      	ldr	r5, [r3, #0]
 8007494:	6862      	ldr	r2, [r4, #4]
 8007496:	2100      	movs	r1, #0
 8007498:	4628      	mov	r0, r5
 800749a:	f7f8 fea1 	bl	80001e0 <memchr>
 800749e:	b108      	cbz	r0, 80074a4 <_printf_i+0x1bc>
 80074a0:	1b40      	subs	r0, r0, r5
 80074a2:	6060      	str	r0, [r4, #4]
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	2300      	movs	r3, #0
 80074aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ae:	e7a7      	b.n	8007400 <_printf_i+0x118>
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4639      	mov	r1, r7
 80074b6:	4630      	mov	r0, r6
 80074b8:	47c0      	blx	r8
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0aa      	beq.n	8007414 <_printf_i+0x12c>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	079b      	lsls	r3, r3, #30
 80074c2:	d413      	bmi.n	80074ec <_printf_i+0x204>
 80074c4:	68e0      	ldr	r0, [r4, #12]
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	4298      	cmp	r0, r3
 80074ca:	bfb8      	it	lt
 80074cc:	4618      	movlt	r0, r3
 80074ce:	e7a3      	b.n	8007418 <_printf_i+0x130>
 80074d0:	2301      	movs	r3, #1
 80074d2:	464a      	mov	r2, r9
 80074d4:	4639      	mov	r1, r7
 80074d6:	4630      	mov	r0, r6
 80074d8:	47c0      	blx	r8
 80074da:	3001      	adds	r0, #1
 80074dc:	d09a      	beq.n	8007414 <_printf_i+0x12c>
 80074de:	3501      	adds	r5, #1
 80074e0:	68e3      	ldr	r3, [r4, #12]
 80074e2:	9a03      	ldr	r2, [sp, #12]
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	42ab      	cmp	r3, r5
 80074e8:	dcf2      	bgt.n	80074d0 <_printf_i+0x1e8>
 80074ea:	e7eb      	b.n	80074c4 <_printf_i+0x1dc>
 80074ec:	2500      	movs	r5, #0
 80074ee:	f104 0919 	add.w	r9, r4, #25
 80074f2:	e7f5      	b.n	80074e0 <_printf_i+0x1f8>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1ac      	bne.n	8007452 <_printf_i+0x16a>
 80074f8:	7803      	ldrb	r3, [r0, #0]
 80074fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007502:	e76c      	b.n	80073de <_printf_i+0xf6>
 8007504:	08007631 	.word	0x08007631
 8007508:	08007642 	.word	0x08007642

0800750c <memcpy>:
 800750c:	b510      	push	{r4, lr}
 800750e:	1e43      	subs	r3, r0, #1
 8007510:	440a      	add	r2, r1
 8007512:	4291      	cmp	r1, r2
 8007514:	d100      	bne.n	8007518 <memcpy+0xc>
 8007516:	bd10      	pop	{r4, pc}
 8007518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007520:	e7f7      	b.n	8007512 <memcpy+0x6>

08007522 <memmove>:
 8007522:	4288      	cmp	r0, r1
 8007524:	b510      	push	{r4, lr}
 8007526:	eb01 0302 	add.w	r3, r1, r2
 800752a:	d807      	bhi.n	800753c <memmove+0x1a>
 800752c:	1e42      	subs	r2, r0, #1
 800752e:	4299      	cmp	r1, r3
 8007530:	d00a      	beq.n	8007548 <memmove+0x26>
 8007532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007536:	f802 4f01 	strb.w	r4, [r2, #1]!
 800753a:	e7f8      	b.n	800752e <memmove+0xc>
 800753c:	4283      	cmp	r3, r0
 800753e:	d9f5      	bls.n	800752c <memmove+0xa>
 8007540:	1881      	adds	r1, r0, r2
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	42d3      	cmn	r3, r2
 8007546:	d100      	bne.n	800754a <memmove+0x28>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007552:	e7f7      	b.n	8007544 <memmove+0x22>

08007554 <_realloc_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	4607      	mov	r7, r0
 8007558:	4614      	mov	r4, r2
 800755a:	460e      	mov	r6, r1
 800755c:	b921      	cbnz	r1, 8007568 <_realloc_r+0x14>
 800755e:	4611      	mov	r1, r2
 8007560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007564:	f7ff bc58 	b.w	8006e18 <_malloc_r>
 8007568:	b922      	cbnz	r2, 8007574 <_realloc_r+0x20>
 800756a:	f7ff fc07 	bl	8006d7c <_free_r>
 800756e:	4625      	mov	r5, r4
 8007570:	4628      	mov	r0, r5
 8007572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007574:	f000 f814 	bl	80075a0 <_malloc_usable_size_r>
 8007578:	42a0      	cmp	r0, r4
 800757a:	d20f      	bcs.n	800759c <_realloc_r+0x48>
 800757c:	4621      	mov	r1, r4
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff fc4a 	bl	8006e18 <_malloc_r>
 8007584:	4605      	mov	r5, r0
 8007586:	2800      	cmp	r0, #0
 8007588:	d0f2      	beq.n	8007570 <_realloc_r+0x1c>
 800758a:	4631      	mov	r1, r6
 800758c:	4622      	mov	r2, r4
 800758e:	f7ff ffbd 	bl	800750c <memcpy>
 8007592:	4631      	mov	r1, r6
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff fbf1 	bl	8006d7c <_free_r>
 800759a:	e7e9      	b.n	8007570 <_realloc_r+0x1c>
 800759c:	4635      	mov	r5, r6
 800759e:	e7e7      	b.n	8007570 <_realloc_r+0x1c>

080075a0 <_malloc_usable_size_r>:
 80075a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a4:	1f18      	subs	r0, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfbc      	itt	lt
 80075aa:	580b      	ldrlt	r3, [r1, r0]
 80075ac:	18c0      	addlt	r0, r0, r3
 80075ae:	4770      	bx	lr

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
